---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import RelatedContent from '../../components/RelatedContent.astro';

export async function getStaticPaths() {
  const guides = await getCollection('guides');
  
  return guides.map(guide => {
    // Handle the slug - if the guide has a url in frontmatter, use it
    // Otherwise use the file id
    const slug = guide.data.url 
      ? guide.data.url.replace('/guides/', '').replace(/\/$/, '')
      : guide.id;
    
    return {
      params: { slug },
      props: { guide }
    };
  });
}

const { guide } = Astro.props;
const { Content } = await guide.render();

// Get all guides for navigation
const allGuides = await getCollection('guides');

// Organize guides by category (using tags or default category)
const guidesByCategory = allGuides.reduce((acc, g) => {
  const categories = g.data.categories || g.data.tags || ['General'];
  categories.forEach(cat => {
    if (!acc[cat]) acc[cat] = [];
    acc[cat].push({
      title: g.data.title,
      url: g.data.url || `/guides/${g.id}/`,
      isCurrent: g.id === guide.id
    });
  });
  return acc;
}, {});

// Get related content
const relatedGuides = allGuides
  .filter(g => g.id !== guide.id)
  .filter(g => {
    // Find guides with similar tags
    const currentTags = guide.data.tags || [];
    const guideTags = g.data.tags || [];
    return currentTags.some(tag => guideTags.includes(tag));
  })
  .slice(0, 5)
  .map(g => ({
    href: g.data.url || `/guides/${g.id}/`,
    title: g.data.title,
    description: g.data.description,
    type: 'guide'
  }));

// Get blog posts and services for cross-linking
const blogPosts = await getCollection('blog');
const services = await getCollection('services');

// Find related content based on keywords
const keywords = (guide.data.tags || []).concat(guide.data.categories || []);
const relatedBlogs = blogPosts
  .filter(b => {
    const blogTags = b.data.tags || [];
    return keywords.some(k => 
      b.data.title.toLowerCase().includes(k.toLowerCase()) ||
      blogTags.some(t => t.toLowerCase().includes(k.toLowerCase()))
    );
  })
  .slice(0, 3)
  .map(b => ({
    title: b.data.title,
    url: b.data.url || `/blog/${b.id}/`,
    type: 'blog'
  }));

const relatedServices = services
  .filter(s => {
    const serviceTags = s.data.tags || [];
    return keywords.some(k => 
      s.data.title.toLowerCase().includes(k.toLowerCase()) ||
      serviceTags.some(t => t.toLowerCase().includes(k.toLowerCase()))
    );
  })
  .slice(0, 3)
  .map(s => ({
    title: s.data.title,
    url: s.data.url || `/services/${s.id}/`,
    type: 'service'
  }));
---

<MainLayout title={guide.data.title} description={guide.data.description}>
  <!-- Skip to main content link for keyboard users -->
  <a href="#main-content" class="skip-link">Skip to main content</a>
  
  <div class="guide-container">
    <div class="container">
      <!-- Breadcrumbs -->
      <Breadcrumbs current={guide.data.title} />
      
      <!-- 3-Column Layout -->
      <div class="content-layout">
        <!-- Left Sidebar - Guide Navigation -->
        <aside class="sidebar-left" aria-label="Guide navigation">
          <div class="sticky-sidebar">
            <h3 class="sidebar-title"><span aria-hidden="true">📖</span> All Guides</h3>
            
            <!-- Category Navigation -->
            <nav class="category-nav" aria-label="Guides by category">
              {Object.entries(guidesByCategory).map(([category, guides]) => (
                <div class="category-group">
                  <h4 class="category-title">{category}</h4>
                  <ul class="guide-list">
                    {guides.slice(0, 5).map(g => (
                      <li class={g.isCurrent ? 'current' : ''}>
                        <a href={g.url} aria-current={g.isCurrent ? 'page' : undefined}>
                          {g.isCurrent && <span class="current-indicator" aria-hidden="true">→</span>}
                          {g.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              ))}
            </nav>
            
            <!-- Quick Links -->
            <nav class="quick-links" aria-label="Quick navigation">
              <h4>Quick Links</h4>
              <ul>
                <li><a href="/blog/">Latest Articles</a></li>
                <li><a href="/services/">Our Services</a></li>
                <li><a href="/contact/">Get Help</a></li>
              </ul>
            </nav>
          </div>
        </aside>
        
        <!-- Main Content -->
        <main class="main-content" id="main-content">
          <!-- Guide Header -->
          <header class="guide-header">
            <div class="guide-badge"><span aria-hidden="true">📖</span> Expert Guide</div>
            <h1 class="guide-title">{guide.data.title}</h1>
            {guide.data.description && (
              <p class="guide-description">{guide.data.description}</p>
            )}
          </header>
          
          <!-- Table of Contents (mobile/tablet) -->
          <nav class="toc-mobile" id="table-of-contents-mobile" aria-label="Table of contents">
            <details>
              <summary><span aria-hidden="true">📑</span> Table of Contents</summary>
              <div class="toc-content" id="toc-list-mobile">
                <!-- Will be populated by JavaScript -->
              </div>
            </details>
          </nav>
          
          <!-- Guide Content -->
          <article class="guide-content">
            <Content />
          </article>
          
          <!-- Expert Help CTA -->
          <div class="expert-cta">
            <h3>Need Expert Assistance?</h3>
            <p>Our professional team is ready to help you implement these solutions.</p>
            <div class="cta-buttons">
              <a href="tel:437-545-0067" class="cta-primary">
                <span aria-hidden="true">📞</span> Call (437) 545-0067
              </a>
              <a href="/contact/" class="cta-secondary">
                Schedule Consultation
              </a>
            </div>
          </div>
          
          <!-- Related Guides -->
          {relatedGuides.length > 0 && (
            <RelatedContent 
              title="Related Guides"
              items={relatedGuides.slice(0, 3)}
              layout="grid"
            />
          )}
        </main>
        
        <!-- Right Sidebar - Context & Related Content -->
        <aside class="sidebar-right" aria-label="Guide context and related content">
          <div class="sticky-sidebar">
            <!-- Table of Contents (desktop) -->
            <nav class="toc-desktop" id="table-of-contents" aria-label="In this guide">
              <h3><span aria-hidden="true">📋</span> In This Guide</h3>
              <div class="toc-content" id="toc-list">
                <!-- Will be populated by JavaScript -->
              </div>
            </nav>
            
            <!-- Key Points -->
            <section class="key-points" id="key-points" aria-live="polite" aria-label="Key points for current section">
              <h3><span aria-hidden="true">🔑</span> Key Points</h3>
              <div class="points-content" id="points-list">
                <!-- Will be populated by JavaScript based on current section -->
              </div>
            </section>
            
            <!-- Related Articles -->
            {relatedBlogs.length > 0 && (
              <nav class="related-links" aria-label="Related articles">
                <h3><span aria-hidden="true">📰</span> Related Articles</h3>
                <ul>
                  {relatedBlogs.map(blog => (
                    <li>
                      <a href={blog.url}>{blog.title}</a>
                    </li>
                  ))}
                </ul>
              </nav>
            )}
            
            <!-- Related Services -->
            {relatedServices.length > 0 && (
              <nav class="related-links" aria-label="Related services">
                <h3><span aria-hidden="true">🛠️</span> Related Services</h3>
                <ul>
                  {relatedServices.map(service => (
                    <li>
                      <a href={service.url}>{service.title}</a>
                    </li>
                  ))}
                </ul>
              </nav>
            )}
            
            <!-- Quick Contact -->
            <div class="quick-contact">
              <h3>Get Expert Help</h3>
              <p>Need help with this guide?</p>
              <a href="tel:437-545-0067" class="contact-btn">
                <span aria-hidden="true">📞</span>
                <span class="sr-only">Call us at</span>
                (437) 545-0067
              </a>
              <a href="/contact/" class="quote-btn">
                Get Free Quote
              </a>
            </div>
          </div>
        </aside>
      </div>
    </div>
  </div>
  
  <script>
    // Generate table of contents and extract key points
    document.addEventListener('DOMContentLoaded', () => {
      const content = document.querySelector('.guide-content');
      const tocList = document.getElementById('toc-list');
      const tocListMobile = document.getElementById('toc-list-mobile');
      const pointsList = document.getElementById('points-list');
      
      if (content) {
        const headings = content.querySelectorAll('h2');
        const sections = [];
        
        // Process headings and extract content
        headings.forEach((heading, index) => {
          // Add ID if missing
          if (!heading.id) {
            heading.id = `section-${index + 1}`;
          }
          
          // Get content until next heading
          let nextElement = heading.nextElementSibling;
          let sectionContent = [];
          let keyPoints = [];
          let importantNumbers = [];
          let warnings = [];
          
          while (nextElement && nextElement.tagName !== 'H2') {
            // Collect paragraph text
            if (nextElement.tagName === 'P') {
              const text = nextElement.textContent;
              sectionContent.push(text);
              
              // Extract numbers with context
              const numberMatches = text.match(/\d+[\d,]*\+?\s*(?:steps?|minutes?|hours?|days?|%|dollars?|\$)/gi);
              if (numberMatches) {
                importantNumbers = importantNumbers.concat(numberMatches);
              }
              
              // Extract warnings or important notes
              if (text.toLowerCase().includes('warning') || 
                  text.toLowerCase().includes('important') || 
                  text.toLowerCase().includes('tip')) {
                warnings.push(text.substring(0, 100) + '...');
              }
            }
            
            // Extract lists as key points
            if (nextElement.tagName === 'UL' || nextElement.tagName === 'OL') {
              const items = nextElement.querySelectorAll('li');
              items.forEach((item, idx) => {
                if (idx < 5) { // Limit to first 5 items
                  keyPoints.push({
                    text: item.textContent.trim(),
                    type: 'list'
                  });
                }
              });
            }
            
            // Extract strong/bold text as key points
            if (nextElement.tagName === 'P') {
              const strongs = nextElement.querySelectorAll('strong, b');
              strongs.forEach(strong => {
                const text = strong.textContent.trim();
                if (text.length > 10 && text.length < 100) {
                  keyPoints.push({
                    text: text,
                    type: 'emphasis'
                  });
                }
              });
            }
            
            // Extract H3 headings as sub-points
            if (nextElement.tagName === 'H3') {
              keyPoints.push({
                text: nextElement.textContent,
                type: 'subheading'
              });
            }
            
            // Extract blockquotes
            if (nextElement.tagName === 'BLOCKQUOTE') {
              keyPoints.push({
                text: nextElement.textContent.trim(),
                type: 'quote'
              });
            }
            
            nextElement = nextElement.nextElementSibling;
          }
          
          const sectionData = {
            id: heading.id,
            title: heading.textContent,
            content: sectionContent.join(' '),
            keyPoints: keyPoints.slice(0, 5),
            importantNumbers: importantNumbers.slice(0, 3),
            warnings: warnings.slice(0, 1)
          };
          
          console.log('Section data:', sectionData); // Debug
          sections.push(sectionData);
        });
        
        // Generate TOC
        if (sections.length > 0 && tocList) {
          const ul = document.createElement('ul');
          
          sections.forEach(section => {
            const li = document.createElement('li');
            const a = document.createElement('a');
            a.href = `#${section.id}`;
            a.textContent = section.title;
            a.dataset.sectionId = section.id;
            a.addEventListener('click', (e) => {
              e.preventDefault();
              document.getElementById(section.id).scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
              });
            });
            
            li.appendChild(a);
            ul.appendChild(li);
          });
          
          tocList.appendChild(ul);
          
          // Clone for mobile
          if (tocListMobile) {
            tocListMobile.appendChild(ul.cloneNode(true));
          }
        }
        
        // Scroll tracking and key points update
        let currentSection = null;
        
        const updateActiveSection = () => {
          const scrollPosition = window.scrollY + 100;
          
          sections.forEach(section => {
            const element = document.getElementById(section.id);
            if (element) {
              const rect = element.getBoundingClientRect();
              const top = rect.top + window.scrollY;
              const bottom = top + rect.height;
              
              if (scrollPosition >= top && scrollPosition < bottom) {
                if (currentSection !== section.id) {
                  currentSection = section.id;
                  
                  // Update active TOC item
                  document.querySelectorAll('.toc-content a').forEach(a => {
                    a.classList.remove('active');
                    if (a.dataset.sectionId === section.id) {
                      a.classList.add('active');
                    }
                  });
                  
                  // Update key points display
                  updateKeyPointsDisplay(section);
                }
              }
            }
          });
        };
        
        // Initial update - show first section's key points
        if (sections.length > 0 && pointsList) {
          // Display first section's content immediately
          const firstSection = sections[0];
          currentSection = firstSection.id;
          
          // Update TOC
          document.querySelector(`.toc-content a[data-section-id="${firstSection.id}"]`)?.classList.add('active');
          
          // Display initial key points
          updateKeyPointsDisplay(firstSection);
        }
        
        function updateKeyPointsDisplay(section) {
          if (!pointsList) return;
          
          pointsList.innerHTML = '';
          
          // Show warnings first if any
          if (section.warnings && section.warnings.length > 0) {
            const warningDiv = document.createElement('div');
            warningDiv.className = 'warning-highlight';
            warningDiv.innerHTML = `<span aria-hidden="true">💡</span> <span role="alert">${section.warnings[0]}</span>`;
            pointsList.appendChild(warningDiv);
          }
          
          // Show important numbers
          if (section.importantNumbers && section.importantNumbers.length > 0) {
            const numbersDiv = document.createElement('div');
            numbersDiv.className = 'numbers-highlight';
            section.importantNumbers.forEach(num => {
              const span = document.createElement('span');
              span.className = 'number-badge';
              span.textContent = num;
              numbersDiv.appendChild(span);
            });
            pointsList.appendChild(numbersDiv);
          }
          
          // Show key points with different styling based on type
          if (section.keyPoints && section.keyPoints.length > 0) {
            const pointsContainer = document.createElement('div');
            pointsContainer.className = 'points-container';
            
            section.keyPoints.forEach(point => {
              const pointDiv = document.createElement('div');
              pointDiv.className = `key-point key-point-${point.type || 'default'}`;
              
              if (typeof point === 'string') {
                // Handle legacy string format
                pointDiv.innerHTML = `<span>• ${point}</span>`;
              } else {
                // Handle object format
                switch(point.type) {
                  case 'subheading':
                    pointDiv.innerHTML = `<strong><span aria-hidden="true">📌</span> ${point.text}</strong>`;
                    break;
                  case 'emphasis':
                    pointDiv.innerHTML = `<span class="emphasis"><span aria-hidden="true">💡</span> ${point.text}</span>`;
                    break;
                  case 'quote':
                    pointDiv.innerHTML = `<blockquote>"${point.text}"</blockquote>`;
                    break;
                  case 'list':
                  default:
                    pointDiv.innerHTML = `<span>• ${point.text}</span>`;
                    break;
                }
              }
              
              pointsContainer.appendChild(pointDiv);
            });
            
            pointsList.appendChild(pointsContainer);
          } else if (!section.warnings || section.warnings.length === 0) {
            // Show summary if no key points or warnings
            const p = document.createElement('p');
            p.textContent = section.content.substring(0, 150) + '...';
            p.className = 'summary';
            pointsList.appendChild(p);
          }
        }
        
        // Update on scroll
        let scrollTimer;
        window.addEventListener('scroll', () => {
          clearTimeout(scrollTimer);
          scrollTimer = setTimeout(() => {
            updateActiveSection();
            
            // Find current section and update display
            const currentSectionData = sections.find(s => s.id === currentSection);
            if (currentSectionData) {
              updateKeyPointsDisplay(currentSectionData);
            }
          }, 50);
        });
      }
    });
  </script>
</MainLayout>

<style>
  /* Skip link for keyboard navigation */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 0;
    background: #10b981;
    color: white;
    padding: 0.5rem 1rem;
    text-decoration: none;
    border-radius: 0 0 0.375rem 0;
    z-index: 100;
    font-weight: 600;
  }
  
  .skip-link:focus {
    top: 0;
  }
  
  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
  
  /* Focus indicators */
  a:focus,
  button:focus,
  details summary:focus,
  [tabindex]:focus {
    outline: 3px solid #10b981;
    outline-offset: 2px;
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .guide-content a {
      text-decoration: underline;
    }
    
    .category-tag,
    .number-badge {
      border: 1px solid currentColor;
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
  }
  
  .guide-container {
    padding: 2rem 0 4rem;
    background: #ffffff;
    min-height: 100vh;
  }
  
  .container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  /* 3-Column Layout */
  .content-layout {
    display: grid;
    grid-template-columns: 250px 1fr 300px;
    gap: 2rem;
    margin-top: 2rem;
  }
  
  @media (max-width: 1200px) {
    .content-layout {
      grid-template-columns: 1fr 300px;
    }
    
    .sidebar-left {
      display: none;
    }
  }
  
  @media (max-width: 768px) {
    .content-layout {
      grid-template-columns: 1fr;
    }
    
    .sidebar-right {
      display: none;
    }
  }
  
  /* Sticky Sidebars */
  .sticky-sidebar {
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }
  
  /* Left Sidebar Styles */
  .sidebar-left {
    font-size: 0.875rem;
    background: linear-gradient(to bottom, #fafbfc 0%, #f7f9fb 100%);
    padding: 1.5rem;
    border-radius: 0.75rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  
  .sidebar-title {
    font-size: 1.125rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #1a202c;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid transparent;
    background: linear-gradient(to right, #10b981, #34d399) bottom / 100% 2px no-repeat;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .category-nav {
    margin-bottom: 2rem;
  }
  
  .category-group {
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #e5e7eb;
  }
  
  .category-group:last-child {
    border-bottom: none;
  }
  
  .category-title {
    font-size: 0.75rem;
    font-weight: 700;
    color: #9ca3af;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .category-title::before {
    content: '▸';
    color: #10b981;
    font-size: 0.875rem;
    aria-hidden: true;
  }
  
  .guide-list {
    list-style: none;
    padding: 0;
  }
  
  .guide-list li {
    margin-bottom: 0.625rem;
    position: relative;
  }
  
  .guide-list a {
    color: #6b7280;
    text-decoration: none;
    display: block;
    padding: 0.5rem 0.75rem;
    padding-left: 1.25rem;
    transition: all 0.2s;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    line-height: 1.4;
  }
  
  .guide-list a:hover {
    color: #10b981;
    background: rgba(16, 185, 129, 0.05);
    padding-left: 1.5rem;
  }
  
  .guide-list li.current a {
    color: #10b981;
    font-weight: 600;
    background: rgba(16, 185, 129, 0.08);
  }
  
  .current-indicator {
    position: absolute;
    left: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: #10b981;
    font-weight: 700;
  }
  
  /* Add read indicators */
  .guide-list a::after {
    content: '';
    position: absolute;
    left: 0.375rem;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 4px;
    background: #d1d5db;
    border-radius: 50%;
    opacity: 0.5;
  }
  
  .guide-list li.current a::after {
    display: none;
  }
  
  .quick-links {
    padding: 1rem;
    margin-top: 1.5rem;
    background: rgba(16, 185, 129, 0.05);
    border-radius: 0.5rem;
    border: 1px solid rgba(16, 185, 129, 0.1);
  }
  
  .quick-links h4 {
    font-size: 0.75rem;
    font-weight: 700;
    margin-bottom: 0.75rem;
    color: #059669;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .quick-links h4::before {
    content: '⚡';
    font-size: 0.875rem;
  }
  
  .quick-links ul {
    list-style: none;
    padding: 0;
  }
  
  .quick-links li {
    margin-bottom: 0.5rem;
  }
  
  .quick-links a {
    color: #059669;
    text-decoration: none;
    font-weight: 500;
    display: block;
    padding: 0.375rem 0.75rem;
    background: white;
    border-radius: 0.25rem;
    transition: all 0.2s;
    font-size: 0.875rem;
  }
  
  .quick-links a:hover {
    background: #f0fdf4;
    transform: translateX(4px);
  }
  
  /* Main Content */
  .main-content {
    min-width: 0; /* Prevent overflow */
  }
  
  .guide-header {
    text-align: center;
    margin-bottom: 3rem;
  }
  
  .guide-badge {
    display: inline-block;
    background: #10b981;
    color: white;
    padding: 0.375rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }
  
  .guide-title {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1rem;
    color: #111827;
  }
  
  @media (min-width: 768px) {
    .guide-title {
      font-size: 3rem;
    }
  }
  
  .guide-description {
    font-size: 1.25rem;
    color: #4a5568;
    line-height: 1.5;
  }
  
  /* Mobile TOC */
  .toc-mobile {
    display: none;
    margin-bottom: 2rem;
    background: linear-gradient(to bottom, #fafbfc 0%, #f7f9fb 100%);
    border-radius: 0.75rem;
    padding: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  
  @media (max-width: 768px) {
    .toc-mobile {
      display: block;
    }
  }
  
  .toc-mobile summary {
    cursor: pointer;
    font-weight: 700;
    color: #1a202c;
    font-size: 1.125rem;
    padding-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .toc-mobile[open] summary::after {
    content: '↑';
    margin-left: auto;
    color: #3b82f6;
  }
  
  .toc-mobile:not([open]) summary::after {
    content: '↓';
    margin-left: auto;
    color: #6b7280;
  }
  
  .toc-mobile .toc-content {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 2px solid transparent;
    background: linear-gradient(to right, #3b82f6, #60a5fa) top / 100% 2px no-repeat;
  }
  
  /* Guide Content Styling */
  .guide-content {
    font-size: 1.125rem;
    line-height: 1.8;
    color: #374151;
    font-family: Georgia, 'Times New Roman', serif;
    letter-spacing: -0.003em;
  }
  
  @media (min-width: 768px) {
    .guide-content {
      font-size: 1.1875rem;
    }
  }
  
  /* Typography */
  .guide-content h1,
  .guide-content h2,
  .guide-content h3,
  .guide-content h4,
  .guide-content h5,
  .guide-content h6 {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-weight: 700;
    line-height: 1.3;
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    color: #111827;
    letter-spacing: -0.02em;
  }
  
  .guide-content h2 {
    font-size: 2rem;
    margin-top: 3.5rem;
    padding-top: 1.5rem;
    position: relative;
  }
  
  @media (min-width: 768px) {
    .guide-content h2 {
      font-size: 2.25rem;
    }
  }
  
  .guide-content h2::before {
    content: '';
    position: absolute;
    left: -2rem;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 2rem;
    background: linear-gradient(to bottom, #10b981, #34d399);
    border-radius: 2px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  @media (min-width: 1024px) {
    .guide-content h2::before {
      opacity: 1;
    }
  }
  
  .guide-content h3 {
    font-size: 1.625rem;
    margin-top: 2rem;
    color: #374151;
  }
  
  .guide-content p {
    margin-bottom: 1.75rem;
  }
  
  /* Drop cap for first paragraph */
  .guide-content > p:first-of-type:first-letter {
    float: left;
    font-size: 4.5rem;
    line-height: 0.8;
    margin: 0.125rem 0.5rem 0 0;
    font-weight: 700;
    color: #10b981;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .guide-content ul,
  .guide-content ol {
    margin: 1.75rem 0;
    padding-left: 1.5rem;
  }
  
  .guide-content ul {
    list-style: none;
  }
  
  .guide-content ul li {
    position: relative;
    padding-left: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  .guide-content ul li::before {
    content: '→';
    position: absolute;
    left: 0;
    color: #10b981;
    font-weight: 700;
  }
  
  .guide-content ol {
    counter-reset: guide-counter;
    list-style: none;
  }
  
  .guide-content ol li {
    position: relative;
    padding-left: 2rem;
    margin-bottom: 0.75rem;
    counter-increment: guide-counter;
  }
  
  .guide-content ol li::before {
    content: counter(guide-counter);
    position: absolute;
    left: 0;
    top: 0.125rem;
    width: 1.5rem;
    height: 1.5rem;
    background: #10b981;
    color: white;
    border-radius: 50%;
    font-size: 0.75rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .guide-content strong {
    font-weight: 700;
    color: #111827;
    background: linear-gradient(to bottom, transparent 60%, #bbf7d0 60%);
    padding: 0 2px;
  }
  
  .guide-content a {
    color: #10b981;
    text-decoration: none;
    position: relative;
    transition: color 0.2s ease;
    font-weight: 500;
  }
  
  .guide-content a::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    right: 0;
    height: 2px;
    background: #10b981;
    transform: scaleX(0);
    transform-origin: right;
    transition: transform 0.3s ease;
  }
  
  .guide-content a:hover {
    color: #059669;
  }
  
  .guide-content a:hover::after {
    transform: scaleX(1);
    transform-origin: left;
  }
  
  /* Image Styling */
  .guide-content img {
    width: 100%;
    height: auto;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin: 2rem 0;
  }
  
  .guide-content figure {
    margin: 2rem 0;
    border-radius: 0.5rem;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .guide-content figure img {
    margin: 0;
    display: block;
    box-shadow: none;
  }
  
  .guide-content figcaption {
    background-color: #f7fafc;
    padding: 0.75rem;
    text-align: center;
    font-size: 0.875rem;
    color: #4a5568;
    font-style: italic;
  }
  
  /* Tables */
  .guide-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 2rem 0;
    font-size: 0.875rem;
  }
  
  .guide-content th,
  .guide-content td {
    border: 1px solid #e2e8f0;
    padding: 0.75rem;
    text-align: left;
  }
  
  .guide-content th {
    background: #f7fafc;
    font-weight: 600;
  }
  
  .guide-content tr:nth-child(even) {
    background: #f7fafc;
  }
  
  /* Blockquotes */
  .guide-content blockquote {
    position: relative;
    margin: 2.5rem 0;
    padding: 1.5rem 2rem;
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
    border-left: 4px solid #10b981;
    border-radius: 0.5rem;
    font-style: italic;
    color: #374151;
    font-size: 1.125rem;
    quotes: """ """ "'" "'";
  }
  
  .guide-content blockquote::before {
    content: open-quote;
    position: absolute;
    top: -0.5rem;
    left: 1rem;
    font-size: 4rem;
    color: #10b981;
    opacity: 0.3;
    font-family: Georgia, serif;
  }
  
  .guide-content blockquote p:last-child {
    margin-bottom: 0;
  }
  
  /* Code */
  .guide-content code {
    background: #f7fafc;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: monospace;
  }
  
  .guide-content pre {
    background: #1a202c;
    color: #f7fafc;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 2rem 0;
  }
  
  .guide-content pre code {
    background: none;
    padding: 0;
    color: inherit;
  }
  
  /* Expert CTA */
  .expert-cta {
    margin: 4rem 0;
    padding: 2rem;
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
    border-radius: 0.5rem;
    text-align: center;
    border: 1px solid #bbf7d0;
  }
  
  .expert-cta h3 {
    font-size: 1.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: #166534;
  }
  
  .expert-cta p {
    margin-bottom: 1.5rem;
    color: #15803d;
  }
  
  .cta-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }
  
  .cta-primary,
  .cta-secondary {
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s;
  }
  
  .cta-primary {
    background: #f97316;
    color: white;
  }
  
  .cta-primary:hover {
    background: #ea580c;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .cta-secondary {
    background: white;
    color: #166534;
    border: 2px solid #166534;
  }
  
  .cta-secondary:hover {
    background: #f0fdf4;
  }
  
  /* Callout Boxes */
  .guide-content .callout {
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 2rem 0;
  }
  
  .guide-content .callout-info {
    background: #eff6ff;
    border-left: 4px solid #3b82f6;
    color: #1e40af;
  }
  
  .guide-content .callout-warning {
    background: #fef3c7;
    border-left: 4px solid #f59e0b;
    color: #92400e;
  }
  
  .guide-content .callout-success {
    background: #f0fdf4;
    border-left: 4px solid #10b981;
    color: #166534;
  }
  
  /* Article section separators */
  .guide-content h2:not(:first-child) {
    position: relative;
  }
  
  .guide-content h2:not(:first-child)::after {
    content: '• • •';
    display: block;
    text-align: center;
    margin: 2.5rem 0;
    color: #d1d5db;
    font-size: 1.5rem;
    letter-spacing: 1rem;
    font-weight: 400;
  }
  
  /* Right Sidebar Styles */
  .sidebar-right {
    font-size: 0.875rem;
  }
  
  .sidebar-right > .sticky-sidebar > div {
    margin-bottom: 1.5rem;
    background: white;
    border-radius: 0.75rem;
    border: 1px solid #e2e8f0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    transition: all 0.3s ease;
  }
  
  .sidebar-right > .sticky-sidebar > div:not(.toc-desktop) {
    padding: 1.5rem;
  }
  
  .sidebar-right > .sticky-sidebar > div:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transform: translateY(-1px);
  }
  
  .sidebar-right h3 {
    font-size: 1rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #1a202c;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  /* Desktop TOC - Styled like All Articles */
  .toc-desktop {
    display: block;
    background: linear-gradient(to bottom, #fafbfc 0%, #f7f9fb 100%) !important;
    border: none !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05) !important;
    padding: 1.5rem !important;
  }
  
  .toc-desktop h3 {
    font-size: 1.125rem !important;
    font-weight: 700;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid transparent;
    background: linear-gradient(to right, #3b82f6, #60a5fa) bottom / 100% 2px no-repeat;
    margin-bottom: 1rem;
    color: #1a202c;
  }
  
  @media (max-width: 768px) {
    .toc-desktop {
      display: none;
    }
  }
  
  .toc-content ul {
    list-style: none;
    padding: 0;
  }
  
  .toc-content li {
    margin-bottom: 0.625rem;
    position: relative;
  }
  
  .toc-content a {
    color: #6b7280;
    text-decoration: none;
    display: block;
    padding: 0.5rem 0.75rem;
    padding-left: 1.25rem;
    transition: all 0.2s;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    line-height: 1.4;
    position: relative;
  }
  
  .toc-content a:hover {
    color: #3b82f6;
    background: rgba(59, 130, 246, 0.05);
    padding-left: 1.5rem;
  }
  
  .toc-content a.active {
    color: #3b82f6;
    font-weight: 600;
    background: rgba(59, 130, 246, 0.08);
  }
  
  .toc-content a.active::before {
    content: '→';
    position: absolute;
    left: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    color: #3b82f6;
    font-weight: 700;
  }
  
  /* Add dot indicators like post list */
  .toc-content a::after {
    content: '';
    position: absolute;
    left: 0.375rem;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 4px;
    background: #d1d5db;
    border-radius: 50%;
    opacity: 0.5;
  }
  
  .toc-content a.active::after {
    display: none;
  }
  
  /* Key Points Enhanced */
  .key-points {
    background: linear-gradient(135deg, #fffbf5 0%, #fff9f0 100%) !important;
  }
  
  .warning-highlight {
    background: #fef3c7;
    border-left: 3px solid #f59e0b;
    padding: 0.75rem;
    margin-bottom: 1rem;
    border-radius: 0.375rem;
    font-weight: 600;
    color: #92400e;
    animation: slideInRight 0.3s ease;
  }
  
  .numbers-highlight {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .number-badge {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    padding: 0.375rem 0.75rem;
    border-radius: 9999px;
    font-weight: 700;
    font-size: 0.875rem;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);
    animation: popIn 0.3s ease;
  }
  
  .points-container {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .key-point {
    padding: 0.75rem;
    border-radius: 0.5rem;
    line-height: 1.5;
    animation: fadeInUp 0.4s ease;
    transition: all 0.2s ease;
  }
  
  .key-point:hover {
    transform: translateX(4px);
  }
  
  .key-point-list {
    background: #f0f9ff;
    border-left: 3px solid #3b82f6;
    color: #1e40af;
  }
  
  .key-point-subheading {
    background: #f3f4f6;
    border-left: 3px solid #6b7280;
    font-weight: 700;
  }
  
  .key-point-emphasis {
    background: #fef3c7;
    border-left: 3px solid #fbbf24;
    color: #92400e;
  }
  
  .key-point-quote {
    background: #ede9fe;
    border-left: 3px solid #8b5cf6;
    font-style: italic;
    color: #5b21b6;
  }
  
  .key-point-quote blockquote {
    margin: 0;
    padding: 0;
  }
  
  .key-point-default {
    background: #f9fafb;
    border-left: 3px solid #d1d5db;
    color: #374151;
  }
  
  .key-points .summary {
    font-style: italic;
    color: #4a5568;
    line-height: 1.5;
    padding: 0.75rem;
    background: #f9fafb;
    border-radius: 0.375rem;
    border: 1px dashed #cbd5e0;
  }
  
  /* Animations */
  @keyframes slideInRight {
    from {
      transform: translateX(20px);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes popIn {
    0% {
      transform: scale(0.8);
      opacity: 0;
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes fadeInUp {
    from {
      transform: translateY(10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  /* Related Links */
  .related-links {
    background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%) !important;
  }
  
  .related-links ul {
    list-style: none;
    padding: 0;
  }
  
  .related-links li {
    margin-bottom: 0.75rem;
  }
  
  .related-links a {
    color: #059669;
    text-decoration: none;
    font-size: 0.875rem;
    display: block;
    padding: 0.5rem 0.75rem;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 0.375rem;
    transition: all 0.2s;
    border: 1px solid transparent;
  }
  
  .related-links a:hover {
    background: white;
    border-color: #10b981;
    transform: translateX(4px);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.1);
  }
  
  /* Quick Contact */
  .quick-contact {
    background: linear-gradient(135deg, #fff7ed 0%, #ffedd5 100%) !important;
    text-align: center;
  }
  
  .quick-contact p {
    margin-bottom: 1rem;
    color: #4a5568;
  }
  
  .contact-btn,
  .quote-btn {
    display: block;
    padding: 0.75rem 1rem;
    margin-bottom: 0.75rem;
    border-radius: 0.375rem;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.2s;
  }
  
  .contact-btn {
    background: #f97316;
    color: white;
  }
  
  .contact-btn:hover {
    background: #ea580c;
    transform: translateY(-1px);
  }
  
  .quote-btn {
    background: white;
    color: #f97316;
    border: 2px solid #f97316;
  }
  
  .quote-btn:hover {
    background: #fff7ed;
  }
  
  /* Scrollbar Styling */
  .sticky-sidebar::-webkit-scrollbar {
    width: 6px;
  }
  
  .sticky-sidebar::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  
  .sticky-sidebar::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }
  
  .sticky-sidebar::-webkit-scrollbar-thumb:hover {
    background: #a0aec0;
  }
</style>