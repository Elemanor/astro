---
import { getCollection } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import RelatedContent from '../../components/RelatedContent.astro';
import AstroCard from '../../components/ui/AstroCard.astro';
import AstroButton from '../../components/ui/AstroButton.astro';
import AstroBadge from '../../components/ui/AstroBadge.astro';
import { Phone, Clock, ChevronRight, BookOpen, Lightbulb, FileText, Newspaper, Wrench, AlertTriangle } from 'lucide-react';

export async function getStaticPaths() {
  const guides = await getCollection('guides');
  
  return guides.map(guide => {
    const slug = guide.data.url 
      ? guide.data.url.replace('/guides/', '').replace(/\/$/, '')
      : guide.id;
    
    return {
      params: { slug },
      props: { guide }
    };
  });
}

const { guide } = Astro.props;
const { Content } = await guide.render();

// Get all guides for navigation
const allGuides = await getCollection('guides');

// Organize guides by category
const guidesByCategory = allGuides.reduce((acc, g) => {
  const categories = g.data.categories || g.data.tags || ['General'];
  categories.forEach(cat => {
    if (!acc[cat]) acc[cat] = [];
    acc[cat].push({
      title: g.data.title,
      url: g.data.url || `/guides/${g.id}/`,
      isCurrent: g.id === guide.id
    });
  });
  return acc;
}, {});

// Get related content
const relatedGuides = allGuides
  .filter(g => g.id !== guide.id)
  .filter(g => {
    const currentTags = guide.data.tags || [];
    const guideTags = g.data.tags || [];
    return currentTags.some(tag => guideTags.includes(tag));
  })
  .slice(0, 5)
  .map(g => ({
    href: g.data.url || `/guides/${g.id}/`,
    title: g.data.title,
    description: g.data.description,
    type: 'guide'
  }));

// Get blog posts and services for cross-linking
const blogPosts = await getCollection('blog');
const services = await getCollection('services');

// Find related content based on keywords
const keywords = (guide.data.tags || []).concat(guide.data.categories || []);
const relatedBlogs = blogPosts
  .filter(b => {
    const blogTags = b.data.tags || [];
    return keywords.some(k => 
      b.data.title.toLowerCase().includes(k.toLowerCase()) ||
      blogTags.some(t => t.toLowerCase().includes(k.toLowerCase()))
    );
  })
  .slice(0, 3)
  .map(b => ({
    title: b.data.title,
    url: b.data.url || `/blog/${b.id}/`,
    type: 'blog'
  }));

const relatedServices = services
  .filter(s => {
    const serviceTags = s.data.tags || [];
    return keywords.some(k => 
      s.data.title.toLowerCase().includes(k.toLowerCase()) ||
      serviceTags.some(t => t.toLowerCase().includes(k.toLowerCase()))
    );
  })
  .slice(0, 3)
  .map(s => ({
    title: s.data.title,
    url: s.data.url || `/services/${s.id}/`,
    type: 'service'
  }));
---

<MainLayout title={guide.data.title} description={guide.data.description}>
  <!-- Skip to main content link -->
  <a href="#main-content" class="skip-link">Skip to main content</a>
  
  <div class="min-h-screen bg-background">
    <div class="container mx-auto px-4 py-8">
      <!-- Breadcrumbs -->
      <Breadcrumbs current={guide.data.title} />
      
      <!-- 3-Column Layout -->
      <div class="grid grid-cols-1 lg:grid-cols-[250px_1fr] xl:grid-cols-[250px_1fr_300px] gap-8 mt-8">
        <!-- Left Sidebar - Guide Navigation -->
        <aside class="hidden lg:block" aria-label="Guide navigation">
          <div class="sticky top-8 space-y-6">
            <!-- All Guides Card -->
            <AstroCard class="bg-gradient-to-b from-emerald-50 to-emerald-100 border-0">
              <h3 class="text-lg font-semibold mb-4 pb-2 border-b-2 border-secondary flex items-center gap-2">
                <BookOpen className="h-5 w-5 text-secondary" client:load />
                All Guides
              </h3>
              
              <!-- Category Navigation -->
              <nav aria-label="Guides by category" class="space-y-6">
                {Object.entries(guidesByCategory).map(([category, guides]) => (
                  <div class="space-y-2">
                    <h4 class="text-xs font-bold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                      <ChevronRight className="h-3 w-3 text-secondary" client:load />
                      {category}
                    </h4>
                    <ul class="space-y-1">
                      {guides.slice(0, 5).map(g => (
                        <li>
                          <a 
                            href={g.url}
                            aria-current={g.isCurrent ? 'page' : undefined}
                            class={`
                              block px-3 py-2 text-sm rounded-md transition-all relative
                              ${g.isCurrent 
                                ? 'bg-secondary/10 text-secondary font-medium' 
                                : 'text-muted-foreground hover:text-secondary hover:bg-secondary/5 hover:translate-x-1'
                              }
                            `}
                          >
                            {g.isCurrent && (
                              <span aria-hidden="true" class="absolute left-0 top-1/2 -translate-y-1/2 text-secondary font-bold">â†’</span>
                            )}
                            <span class={g.isCurrent ? 'ml-4' : ''}>
                              {g.title}
                            </span>
                          </a>
                        </li>
                      ))}
                    </ul>
                  </div>
                ))}
              </nav>
            </AstroCard>
            
            <!-- Quick Links -->
            <AstroCard class="bg-secondary/5 border-secondary/20">
              <nav aria-label="Quick navigation">
                <h4 class="text-xs font-bold text-secondary uppercase tracking-wider mb-3 flex items-center gap-2">
                  <Lightbulb className="h-4 w-4" client:load />
                  Quick Resources
                </h4>
                <div class="space-y-2">
                  <AstroButton href="/services/" variant="secondary" size="sm" class="w-full justify-start">
                    Professional Services
                  </AstroButton>
                  <AstroButton href="/blog/" variant="secondary" size="sm" class="w-full justify-start">
                    Latest Articles
                  </AstroButton>
                  <AstroButton href="/contact/" variant="secondary" size="sm" class="w-full justify-start">
                    Get Expert Help
                  </AstroButton>
                </div>
              </nav>
            </AstroCard>
          </div>
        </aside>
        
        <!-- Main Content -->
        <main id="main-content" class="min-w-0">
          <!-- Guide Header -->
          <header class="mb-8">
            <AstroBadge variant="secondary" class="mb-4">
              <BookOpen className="h-3 w-3 mr-1" client:load />
              Expert Guide
            </AstroBadge>
            
            <h1 class="text-4xl md:text-5xl font-bold mb-4 text-foreground">
              {guide.data.title}
            </h1>
            
            {guide.data.description && (
              <p class="text-lg text-muted-foreground mb-4">
                {guide.data.description}
              </p>
            )}
            
            <div class="flex flex-wrap gap-4 items-center text-sm text-muted-foreground">
              {guide.data.readTime && (
                <span class="flex items-center gap-2">
                  <Clock className="h-4 w-4" client:load />
                  <span class="sr-only">Reading time:</span>
                  {guide.data.readTime} read
                </span>
              )}
              
              {guide.data.difficulty && (
                <AstroBadge variant="outline" class="text-xs">
                  Difficulty: {guide.data.difficulty}
                </AstroBadge>
              )}
              
              {guide.data.tags && guide.data.tags.length > 0 && (
                <div class="flex gap-2 flex-wrap">
                  {guide.data.tags.slice(0, 3).map(tag => (
                    <AstroBadge variant="secondary" class="text-xs">
                      {tag}
                    </AstroBadge>
                  ))}
                </div>
              )}
            </div>
          </header>
          
          <!-- Mobile Table of Contents -->
          <nav class="lg:hidden mb-6 bg-muted/50 rounded-lg p-4" aria-label="Table of contents">
            <details class="group">
              <summary class="cursor-pointer font-semibold text-lg flex items-center justify-between">
                <span class="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-secondary" client:load />
                  Table of Contents
                </span>
                <ChevronRight className="h-5 w-5 transition-transform group-open:rotate-90" client:load />
              </summary>
              <div class="mt-4 space-y-2" id="toc-list-mobile">
                <!-- Will be populated by JavaScript -->
              </div>
            </details>
          </nav>
          
          <!-- Guide Content -->
          <article class="prose prose-lg max-w-none 
            prose-headings:font-bold prose-headings:text-foreground
            prose-p:text-foreground prose-p:leading-relaxed
            prose-a:text-secondary prose-a:underline-offset-4 hover:prose-a:underline
            prose-strong:text-foreground prose-strong:font-semibold
            prose-ul:list-disc prose-ul:pl-6
            prose-ol:list-decimal prose-ol:pl-6
            prose-blockquote:border-l-4 prose-blockquote:border-secondary prose-blockquote:pl-4 prose-blockquote:italic
            prose-img:rounded-lg prose-img:shadow-lg
            prose-code:bg-muted prose-code:px-1.5 prose-code:py-0.5 prose-code:rounded prose-code:text-sm
            prose-pre:bg-muted prose-pre:p-4 prose-pre:rounded-lg
          ">
            <Content />
          </article>
          
          <!-- Mobile Key Steps -->
          <AstroCard class="xl:hidden mt-8 bg-gradient-to-b from-emerald-50 to-emerald-100 border-emerald-200">
            <section aria-label="Guide key steps">
              <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
                <Lightbulb className="h-5 w-5 text-emerald-600" client:load />
                Key Steps from This Guide
              </h3>
              <div id="points-list-mobile" class="space-y-3">
                <!-- Will be populated by JavaScript -->
              </div>
            </section>
          </AstroCard>
          
          <!-- Safety Warning -->
          <AstroCard class="mt-8 bg-amber-50 border-amber-200">
            <div class="flex gap-4">
              <AlertTriangle className="h-6 w-6 text-amber-600 flex-shrink-0 mt-1" client:load />
              <div class="space-y-2">
                <h3 class="text-lg font-semibold text-amber-900">Safety First</h3>
                <p class="text-amber-800 text-sm">
                  Always prioritize safety when attempting DIY repairs. If you're unsure about any step or 
                  encounter unexpected issues, consult with a professional immediately.
                </p>
              </div>
            </div>
          </AstroCard>
          
          <!-- Expert Help CTA -->
          <AstroCard class="mt-8 bg-gradient-to-br from-secondary/10 to-secondary/20 border-secondary/30">
            <div class="text-center space-y-4">
              <h3 class="text-2xl font-bold">Need Expert Assistance?</h3>
              <p class="text-muted-foreground">
                Our professional team is ready to help you implement these solutions safely and effectively.
              </p>
              <div class="flex flex-col sm:flex-row gap-4 justify-center">
                <AstroButton href="tel:437-545-0067" variant="secondary" size="lg" class="gap-2">
                  <Phone className="h-5 w-5" client:load />
                  Call (437) 545-0067
                </AstroButton>
                <AstroButton href="/contact/" variant="outline" size="lg">
                  Schedule Consultation
                </AstroButton>
              </div>
            </div>
          </AstroCard>
          
          <!-- Related Guides -->
          {relatedGuides.length > 0 && (
            <div class="mt-12">
              <RelatedContent 
                title="Related Guides"
                items={relatedGuides.slice(0, 3)}
                layout="grid"
              />
            </div>
          )}
        </main>
        
        <!-- Right Sidebar - Context & Related Content -->
        <aside class="hidden xl:block" aria-label="Guide context and related content">
          <div class="sticky top-24 space-y-6 max-h-[calc(100vh-8rem)] overflow-y-auto">
            <!-- Table of Contents (desktop) -->
            <AstroCard class="bg-gradient-to-b from-emerald-50 to-emerald-100 border-0">
              <nav aria-label="In this guide">
                <h3 class="text-lg font-semibold mb-4 pb-2 border-b-2 border-secondary flex items-center gap-2">
                  <FileText className="h-5 w-5 text-secondary" client:load />
                  In This Guide
                </h3>
                <div class="space-y-2" id="toc-list">
                  <!-- Will be populated by JavaScript -->
                </div>
              </nav>
            </AstroCard>
            
            <!-- Key Steps -->
            <AstroCard class="bg-gradient-to-b from-emerald-50 to-emerald-100 border-emerald-200">
              <section aria-live="polite" aria-label="Key steps for current section">
                <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
                  <Lightbulb className="h-5 w-5 text-emerald-600" client:load />
                  Key Steps
                </h3>
                <div id="points-list" class="space-y-3 max-h-96 overflow-y-auto">
                  <p class="text-sm text-muted-foreground italic">Scroll to see key steps from the current section...</p>
                </div>
              </section>
            </AstroCard>
            
            <!-- Related Articles -->
            {relatedBlogs.length > 0 && (
              <AstroCard>
                <nav aria-label="Related articles">
                  <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
                    <Newspaper className="h-5 w-5 text-primary" client:load />
                    Related Articles
                  </h3>
                  <ul class="space-y-2">
                    {relatedBlogs.map(blog => (
                      <li>
                        <a 
                          href={blog.url}
                          class="text-sm text-muted-foreground hover:text-primary transition-colors"
                        >
                          {blog.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </AstroCard>
            )}
            
            <!-- Related Services -->
            {relatedServices.length > 0 && (
              <AstroCard>
                <nav aria-label="Related services">
                  <h3 class="text-lg font-semibold mb-4 flex items-center gap-2">
                    <Wrench className="h-5 w-5 text-accent" client:load />
                    Professional Services
                  </h3>
                  <ul class="space-y-2">
                    {relatedServices.map(service => (
                      <li>
                        <a 
                          href={service.url}
                          class="text-sm text-muted-foreground hover:text-accent transition-colors"
                        >
                          {service.title}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
              </AstroCard>
            )}
            
            <!-- Quick Contact -->
            <AstroCard class="bg-gradient-to-b from-secondary/10 to-secondary/20 border-secondary/30">
              <div class="text-center space-y-4">
                <h3 class="text-lg font-semibold">Get Expert Help</h3>
                <p class="text-sm text-muted-foreground">Need professional assistance?</p>
                <AstroButton href="tel:437-545-0067" variant="secondary" size="sm" class="w-full gap-2">
                  <Phone className="h-4 w-4" client:load />
                  (437) 545-0067
                </AstroButton>
                <AstroButton href="/contact/" variant="outline" size="sm" class="w-full">
                  Get Free Quote
                </AstroButton>
              </div>
            </AstroCard>
          </div>
        </aside>
      </div>
    </div>
  </div>
  
  <script>
    // Generate table of contents and extract key steps
    document.addEventListener('DOMContentLoaded', () => {
      const content = document.querySelector('article');
      const tocList = document.getElementById('toc-list');
      const tocListMobile = document.getElementById('toc-list-mobile');
      const pointsList = document.getElementById('points-list');
      const pointsListMobile = document.getElementById('points-list-mobile');
      
      if (content) {
        const headings = content.querySelectorAll('h2');
        const sections = [];
        const allKeySteps = [];
        
        // Process headings and extract content
        headings.forEach((heading, index) => {
          // Add ID if missing
          if (!heading.id) {
            heading.id = `section-${index + 1}`;
          }
          
          // Get content until next heading
          let nextElement = heading.nextElementSibling;
          let sectionContent = [];
          let keySteps = [];
          
          while (nextElement && nextElement.tagName !== 'H2') {
            // Collect important content
            if (nextElement.tagName === 'P') {
              const text = nextElement.textContent;
              sectionContent.push(text);
              
              // Extract step indicators
              if (text.toLowerCase().includes('step') || 
                  text.match(/^\d+\./) ||
                  text.toLowerCase().includes('first') ||
                  text.toLowerCase().includes('next') ||
                  text.toLowerCase().includes('then')) {
                const step = {
                  text: text.substring(0, 150) + (text.length > 150 ? '...' : ''),
                  type: 'step',
                  section: heading.textContent
                };
                keySteps.push(step);
                allKeySteps.push(step);
              }
              
              // Extract warnings
              if (text.toLowerCase().includes('warning') || 
                  text.toLowerCase().includes('caution') || 
                  text.toLowerCase().includes('important')) {
                const warning = {
                  text: text.substring(0, 150) + (text.length > 150 ? '...' : ''),
                  type: 'warning',
                  section: heading.textContent
                };
                keySteps.push(warning);
                allKeySteps.push(warning);
              }
            }
            
            // Extract lists as steps
            if (nextElement.tagName === 'OL') {
              const items = nextElement.querySelectorAll('li');
              items.forEach((item, idx) => {
                if (idx < 5) { // Limit to first 5 items
                  const listStep = {
                    text: `${idx + 1}. ${item.textContent.trim()}`,
                    type: 'step',
                    section: heading.textContent
                  };
                  keySteps.push(listStep);
                  allKeySteps.push(listStep);
                }
              });
            }
            
            // Extract unordered lists as tips
            if (nextElement.tagName === 'UL') {
              const items = nextElement.querySelectorAll('li');
              items.forEach((item, idx) => {
                if (idx < 3) { // Limit to first 3 items
                  const tip = {
                    text: item.textContent.trim(),
                    type: 'tip',
                    section: heading.textContent
                  };
                  keySteps.push(tip);
                  allKeySteps.push(tip);
                }
              });
            }
            
            // Extract H3 headings as sub-steps
            if (nextElement.tagName === 'H3') {
              const subheading = {
                text: nextElement.textContent,
                type: 'subheading',
                section: heading.textContent
              };
              keySteps.push(subheading);
              allKeySteps.push(subheading);
            }
            
            nextElement = nextElement.nextElementSibling;
          }
          
          sections.push({
            id: heading.id,
            title: heading.textContent,
            content: sectionContent.join(' '),
            keySteps: keySteps.slice(0, 5)
          });
        });
        
        // Generate TOC HTML
        function createTOCHTML(containerId) {
          const container = document.getElementById(containerId);
          if (!container) return;
          
          sections.forEach(section => {
            const link = document.createElement('a');
            link.href = `#${section.id}`;
            link.textContent = section.title;
            link.className = 'block px-3 py-2 text-sm rounded-md text-muted-foreground hover:text-secondary hover:bg-secondary/5 transition-all';
            link.dataset.sectionId = section.id;
            
            link.addEventListener('click', (e) => {
              e.preventDefault();
              document.getElementById(section.id).scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
              });
            });
            
            container.appendChild(link);
          });
        }
        
        createTOCHTML('toc-list');
        createTOCHTML('toc-list-mobile');
        
        // Scroll tracking and key steps update
        let currentSection = null;
        
        function updateActiveSection() {
          const scrollPosition = window.scrollY + 100;
          
          sections.forEach(section => {
            const element = document.getElementById(section.id);
            if (element) {
              const rect = element.getBoundingClientRect();
              const top = rect.top + window.scrollY;
              
              if (scrollPosition >= top) {
                currentSection = section.id;
              }
            }
          });
          
          // Update active TOC item
          document.querySelectorAll('#toc-list a, #toc-list-mobile a').forEach(a => {
            if (a.dataset.sectionId === currentSection) {
              a.classList.add('text-secondary', 'font-medium', 'bg-secondary/10');
              a.classList.remove('text-muted-foreground');
            } else {
              a.classList.remove('text-secondary', 'font-medium', 'bg-secondary/10');
              a.classList.add('text-muted-foreground');
            }
          });
          
          // Update key steps
          const section = sections.find(s => s.id === currentSection);
          if (section && pointsList) {
            pointsList.innerHTML = '';
            
            if (section.keySteps.length > 0) {
              section.keySteps.forEach(step => {
                const div = document.createElement('div');
                
                switch(step.type) {
                  case 'warning':
                    div.className = 'p-3 bg-amber-100 border-l-3 border-amber-500 text-amber-900 text-sm rounded';
                    break;
                  case 'step':
                    div.className = 'p-3 bg-emerald-50 border-l-3 border-emerald-500 text-emerald-900 text-sm rounded';
                    break;
                  case 'subheading':
                    div.className = 'p-3 bg-slate-100 border-l-3 border-slate-500 text-slate-900 text-sm rounded font-semibold';
                    break;
                  case 'tip':
                  default:
                    div.className = 'p-3 bg-blue-50 border-l-3 border-blue-500 text-blue-900 text-sm rounded';
                }
                
                div.textContent = step.text;
                pointsList.appendChild(div);
              });
            } else {
              const p = document.createElement('p');
              p.className = 'text-sm text-muted-foreground italic';
              p.textContent = 'Scroll to see key steps from the current section...';
              pointsList.appendChild(p);
            }
          }
        }
        
        // Initial update
        updateActiveSection();
        
        // Populate mobile key steps
        if (pointsListMobile && allKeySteps.length > 0) {
          allKeySteps.slice(0, 15).forEach(step => {
            const div = document.createElement('div');
            let bgClass = 'bg-white';
            let borderClass = 'border-emerald-500';
            
            if (step.type === 'warning') {
              bgClass = 'bg-amber-50';
              borderClass = 'border-amber-500';
            } else if (step.type === 'subheading') {
              bgClass = 'bg-gray-50';
              borderClass = 'border-gray-500';
            } else if (step.type === 'tip') {
              bgClass = 'bg-blue-50';
              borderClass = 'border-blue-500';
            }
            
            div.className = `p-3 ${bgClass} border-l-4 ${borderClass} rounded text-sm`;
            div.innerHTML = `
              <p class="font-medium text-xs text-muted-foreground mb-1">${step.section}</p>
              <p>${step.text}</p>
            `;
            pointsListMobile.appendChild(div);
          });
        }
        
        // Update on scroll
        let scrollTimer;
        window.addEventListener('scroll', () => {
          clearTimeout(scrollTimer);
          scrollTimer = setTimeout(updateActiveSection, 50);
        });
      }
    });
  </script>
</MainLayout>