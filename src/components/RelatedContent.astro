---
export interface Props {
  title?: string;
  items: Array<{
    href: string;
    title: string;
    description?: string;
    type?: 'blog' | 'guide' | 'service' | 'location' | 'tool';
  }>;
  layout?: 'grid' | 'list';
}

const { 
  title = 'Related Resources', 
  items, 
  layout = 'grid' 
} = Astro.props;

// Type icons and colors
const typeConfig = {
  blog: { icon: 'üìù', bgColor: 'bg-blue-50', borderColor: 'border-blue-200' },
  guide: { icon: 'üìñ', bgColor: 'bg-green-50', borderColor: 'border-green-200' },
  service: { icon: 'üîß', bgColor: 'bg-purple-50', borderColor: 'border-purple-200' },
  location: { icon: 'üìç', bgColor: 'bg-orange-50', borderColor: 'border-orange-200' },
  tool: { icon: 'üßÆ', bgColor: 'bg-teal-50', borderColor: 'border-teal-200' },
  default: { icon: 'üîó', bgColor: 'bg-gray-50', borderColor: 'border-gray-200' }
};

// Auto-detect type from URL if not specified
function getItemType(item: any) {
  if (item.type) return item.type;
  if (item.href.startsWith('/blog/')) return 'blog';
  if (item.href.startsWith('/guides/')) return 'guide';
  if (item.href.startsWith('/services/')) return 'service';
  if (item.href.startsWith('/locations/')) return 'location';
  if (item.href.startsWith('/tools/')) return 'tool';
  return 'default';
}
---

<section class="my-12">
  <h3 class="text-2xl font-bold mb-6">{title}</h3>
  
  {layout === 'grid' ? (
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      {items.map(item => {
        const itemType = getItemType(item);
        const config = typeConfig[itemType] || typeConfig.default;
        
        return (
          <a 
            href={item.href}
            class={`block p-4 rounded-lg border-2 ${config.bgColor} ${config.borderColor} hover:shadow-md transition-all duration-200 group`}
          >
            <div class="flex items-start">
              <span class="text-2xl mr-3 flex-shrink-0">{config.icon}</span>
              <div class="flex-1">
                <h4 class="font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">
                  {item.title}
                </h4>
                {item.description && (
                  <p class="text-sm text-gray-600 mt-1">
                    {item.description}
                  </p>
                )}
              </div>
              <span class="ml-2 text-gray-400 group-hover:text-blue-600 transition-colors">‚Üí</span>
            </div>
          </a>
        );
      })}
    </div>
  ) : (
    <ul class="space-y-3">
      {items.map(item => {
        const itemType = getItemType(item);
        const config = typeConfig[itemType] || typeConfig.default;
        
        return (
          <li>
            <a 
              href={item.href}
              class="flex items-center p-3 rounded-lg hover:bg-gray-50 transition-colors group"
            >
              <span class="text-xl mr-3">{config.icon}</span>
              <div class="flex-1">
                <span class="font-medium text-gray-900 group-hover:text-blue-600 transition-colors">
                  {item.title}
                </span>
                {item.description && (
                  <span class="text-sm text-gray-600 ml-2">
                    - {item.description}
                  </span>
                )}
              </div>
              <span class="ml-2 text-gray-400 group-hover:text-blue-600 transition-colors">‚Üí</span>
            </a>
          </li>
        );
      })}
    </ul>
  )}
</section>