---
import { ScrollAnimation } from './ScrollAnimation';
import { Card, CardContent } from './ui/card';

export interface Service {
  title: string;
  description: string;
  price?: string;
  priceNote?: string;
  icon?: string; // SVG path or emoji
  iconType?: 'svg' | 'emoji' | 'image';
  image?: string;
  imageAlt?: string;
  link?: string;
  badge?: {
    text: string;
    color?: 'primary' | 'red' | 'orange' | 'yellow' | 'green' | 'blue';
  };
  features?: string[];
  highlight?: boolean;
}

export interface Props {
  heading?: string;
  headingAccent?: string;
  subheading?: string;
  services: Service[];
  columns?: 2 | 3 | 4; // Number of columns on desktop
  variant?: 'default' | 'cards' | 'minimal' | 'detailed' | 'image-overlay';
  showPrices?: boolean;
  showFeatures?: boolean;
  ctaText?: string;
  background?: 'white' | 'gray';
}

const {
  heading,
  headingAccent,
  subheading,
  services,
  columns = 4,
  variant = 'default',
  showPrices = true,
  showFeatures = false,
  ctaText = "Learn more",
  background = 'white'
} = Astro.props;

const backgroundClasses = {
  white: 'bg-white',
  gray: 'bg-gray-50'
};

const gridClasses = {
  2: 'sm:grid-cols-2',
  3: 'sm:grid-cols-2 lg:grid-cols-3',
  4: 'sm:grid-cols-2 lg:grid-cols-4'
};

const badgeColors = {
  primary: 'bg-primary',
  red: 'bg-red-600',
  orange: 'bg-orange-600',
  yellow: 'bg-yellow-600',
  green: 'bg-green-600',
  blue: 'bg-blue-600'
};

// Default SVG icons if none provided
const defaultIcons = [
  'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c-1.8 4-2 8 3 9 .5.06 1.026.01 1.588-.05L12 21l4.412-3.05c.562.06 1.088.11 1.588.05 5-1 4.8-5 3-9a12.02 12.02 0 00-.382-2.016z',
  'M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6',
  'M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4',
  'M13 10V3L4 14h7v7l9-11h-7z'
];
---

<section class={`py-8 sm:py-12 lg:py-24 ${backgroundClasses[background]}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    {(heading || subheading) && (
      <ScrollAnimation animation="fadeUp" client:visible>
        <div class="text-center mb-8 sm:mb-12 lg:mb-16">
          {heading && (
            <h2 class="font-montserrat text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-light">
              <span set:html={heading}></span>
              {headingAccent && (
                <>
                  {' '}
                  <span class="font-semibold">{headingAccent}</span>
                </>
              )}
            </h2>
          )}
          {subheading && (
            <p class="mt-4 text-lg text-gray-600 max-w-2xl mx-auto">
              {subheading}
            </p>
          )}
        </div>
      </ScrollAnimation>
    )}
    
    {variant === 'image-overlay' ? (
      /* Image Overlay variant - like ProblemCards */
      <div class={`grid grid-cols-1 ${gridClasses[columns]} gap-4 sm:gap-6`}>
        {services.map((service, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
            <Card className={`group overflow-hidden transition-all duration-300 hover:shadow-lg ${
              service.highlight ? 'border-primary border-2' : 'border-gray-200'
            }`}>
              {service.link ? (
                <a href={service.link} class="block">
                  {service.image && (
                    <div class="relative h-48 sm:h-56 lg:h-64 overflow-hidden">
                      <img 
                        src={service.image}
                        alt={service.imageAlt || service.title}
                        class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                      />
                      <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                      {service.badge && (
                        <div class="absolute top-2 left-2 sm:top-4 sm:left-4">
                          <span class={`inline-flex items-center px-2 py-1 sm:px-3 rounded-sm text-xs font-bold text-white ${
                            badgeColors[service.badge.color || 'primary']
                          }`}>
                            {service.badge.text}
                          </span>
                        </div>
                      )}
                      <div class="absolute bottom-4 left-4 right-4">
                        {service.iconType === 'emoji' ? (
                          <span class="text-4xl mb-2 block">{service.icon}</span>
                        ) : service.icon && (
                          <svg class="w-8 h-8 text-white mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon} />
                          </svg>
                        )}
                        <h3 class="text-xl font-bold text-white">{service.title}</h3>
                      </div>
                    </div>
                  )}
                  
                  <CardContent className="p-4 sm:p-6">
                    <p class="text-sm text-gray-600 mb-4 min-h-[3rem]">
                      {service.description}
                    </p>
                    <div class="flex items-center justify-between">
                      {showPrices && service.price && (
                        <span class="text-sm font-medium text-gray-900">{service.price}</span>
                      )}
                      <span class="text-primary text-sm font-medium flex items-center gap-1 group-hover:gap-2 transition-all ml-auto">
                        {ctaText}
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </span>
                    </div>
                  </CardContent>
                </a>
              ) : (
                <div>
                  {/* Same structure but without link wrapper */}
                  {service.image && (
                    <div class="relative h-48 sm:h-56 lg:h-64 overflow-hidden">
                      <img 
                        src={service.image}
                        alt={service.imageAlt || service.title}
                        class="w-full h-full object-cover"
                      />
                      <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
                      {service.badge && (
                        <div class="absolute top-2 left-2 sm:top-4 sm:left-4">
                          <span class={`inline-flex items-center px-2 py-1 sm:px-3 rounded-sm text-xs font-bold text-white ${
                            badgeColors[service.badge.color || 'primary']
                          }`}>
                            {service.badge.text}
                          </span>
                        </div>
                      )}
                      <div class="absolute bottom-4 left-4 right-4">
                        {service.iconType === 'emoji' ? (
                          <span class="text-4xl mb-2 block">{service.icon}</span>
                        ) : service.icon && (
                          <svg class="w-8 h-8 text-white mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon} />
                          </svg>
                        )}
                        <h3 class="text-xl font-bold text-white">{service.title}</h3>
                      </div>
                    </div>
                  )}
                  
                  <CardContent className="p-4 sm:p-6">
                    <p class="text-sm text-gray-600 mb-4">
                      {service.description}
                    </p>
                    {showPrices && service.price && (
                      <span class="text-sm font-medium text-gray-900">{service.price}</span>
                    )}
                  </CardContent>
                </div>
              )}
            </Card>
          </ScrollAnimation>
        ))}
      </div>
    ) : variant === 'detailed' ? (
      /* Detailed variant with features */
      <div class={`grid grid-cols-1 ${gridClasses[Math.min(columns, 3)]} gap-6 lg:gap-8`}>
        {services.map((service, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
            <Card className={`h-full ${service.highlight ? 'ring-2 ring-primary shadow-lg' : ''}`}>
              <CardContent className="p-6">
                <div class="flex items-start gap-4 mb-4">
                  {service.iconType === 'emoji' ? (
                    <span class="text-3xl">{service.icon}</span>
                  ) : service.iconType === 'image' && service.image ? (
                    <img src={service.image} alt="" class="w-12 h-12 rounded-lg object-cover" />
                  ) : (
                    <div class="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0">
                      <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon || defaultIcons[index % defaultIcons.length]} />
                      </svg>
                    </div>
                  )}
                  <div class="flex-grow">
                    <h3 class="text-xl font-bold text-gray-900 mb-2">{service.title}</h3>
                    <p class="text-gray-600">{service.description}</p>
                  </div>
                </div>
                
                {showFeatures && service.features && service.features.length > 0 && (
                  <ul class="space-y-2 mb-4">
                    {service.features.map((feature) => (
                      <li class="flex items-start gap-2 text-sm text-gray-600">
                        <svg class="w-4 h-4 text-primary mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                        </svg>
                        <span>{feature}</span>
                      </li>
                    ))}
                  </ul>
                )}
                
                <div class="flex items-end justify-between pt-4 border-t border-gray-200">
                  {showPrices && service.price && (
                    <div>
                      <p class="text-2xl font-bold text-gray-900">{service.price}</p>
                      {service.priceNote && (
                        <p class="text-xs text-gray-500">{service.priceNote}</p>
                      )}
                    </div>
                  )}
                  {service.link && (
                    <a href={service.link} class="inline-flex items-center text-primary font-medium hover:text-primary/80 transition-colors">
                      {ctaText}
                      <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  )}
                </div>
              </CardContent>
            </Card>
          </ScrollAnimation>
        ))}
      </div>
    ) : variant === 'minimal' ? (
      /* Minimal variant */
      <div class={`grid grid-cols-1 ${gridClasses[columns]} gap-6`}>
        {services.map((service, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.05} client:visible>
            <div class="text-center">
              {service.iconType === 'emoji' ? (
                <span class="text-4xl mb-3 block">{service.icon}</span>
              ) : (
                <div class="w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon || defaultIcons[index % defaultIcons.length]} />
                  </svg>
                </div>
              )}
              <h3 class="text-lg font-semibold mb-2">{service.title}</h3>
              <p class="text-sm text-gray-600 mb-3">{service.description}</p>
              {showPrices && service.price && (
                <p class="text-primary font-semibold">{service.price}</p>
              )}
              {service.link && (
                <a href={service.link} class="inline-flex items-center text-sm text-primary hover:underline mt-2">
                  {ctaText}
                  <svg class="w-3 h-3 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              )}
            </div>
          </ScrollAnimation>
        ))}
      </div>
    ) : variant === 'cards' ? (
      /* Cards variant */
      <div class={`grid grid-cols-1 ${gridClasses[columns]} gap-6`}>
        {services.map((service, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
            <Card className={`h-full hover:shadow-lg transition-shadow ${service.highlight ? 'ring-2 ring-primary' : ''}`}>
              <CardContent className="p-6">
                {service.iconType === 'emoji' ? (
                  <span class="text-3xl mb-4 block">{service.icon}</span>
                ) : (
                  <div class="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4">
                    <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon || defaultIcons[index % defaultIcons.length]} />
                    </svg>
                  </div>
                )}
                <h3 class="text-xl font-bold mb-2">{service.title}</h3>
                <p class="text-gray-600 mb-4">{service.description}</p>
                <div class="flex items-center justify-between">
                  {showPrices && service.price && (
                    <span class="text-lg font-semibold text-gray-900">{service.price}</span>
                  )}
                  {service.link && (
                    <a href={service.link} class="text-primary font-medium hover:text-primary/80 transition-colors inline-flex items-center">
                      {ctaText}
                      <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </a>
                  )}
                </div>
              </CardContent>
            </Card>
          </ScrollAnimation>
        ))}
      </div>
    ) : (
      /* Default variant */
      <div class={`grid grid-cols-1 ${gridClasses[columns]} gap-6`}>
        {services.map((service, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
            <div class={`${background === 'gray' ? 'bg-white rounded-lg p-6' : 'p-6'} ${service.highlight ? 'ring-2 ring-primary shadow-lg' : ''}`}>
              {service.iconType === 'emoji' ? (
                <span class="text-3xl mb-3 block">{service.icon}</span>
              ) : (
                <svg class="w-10 h-10 text-primary mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={service.icon || defaultIcons[index % defaultIcons.length]} />
                </svg>
              )}
              <h3 class="text-xl font-bold mb-2">{service.title}</h3>
              <p class="text-gray-600 mb-4">{service.description}</p>
              {showPrices && service.price && (
                <p class="text-lg font-semibold text-primary mb-2">{service.price}</p>
              )}
              {service.link && (
                <a href={service.link} class="text-primary font-medium hover:text-primary/80 transition-colors inline-flex items-center">
                  {ctaText}
                  <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </a>
              )}
            </div>
          </ScrollAnimation>
        ))}
      </div>
    )}
  </div>
</section>