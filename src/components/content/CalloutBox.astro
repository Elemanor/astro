---
import { AlertCircle, Info, CheckCircle, AlertTriangle, Phone, Calendar } from 'lucide-react';

export interface Props {
  type?: 'info' | 'warning' | 'success' | 'error' | 'tip' | 'call' | 'appointment' | 'quote' | 'emergency';
  title?: string;
  icon?: boolean;
  backgroundImage?: string;
  animate?: boolean;
  class?: string;
}

const { 
  type = 'info',
  title,
  icon = true,
  backgroundImage,
  animate = false,
  class: className = ''
} = Astro.props;

const typeStyles = {
  info: {
    container: 'bg-gradient-to-br from-blue-50 to-cyan-50 border-blue-200 text-blue-900 shadow-lg shadow-blue-100/50',
    icon: 'text-blue-600',
    title: 'text-blue-900',
    glow: 'shadow-blue-200'
  },
  warning: {
    container: 'bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-400 text-yellow-900 shadow-lg shadow-yellow-100/50',
    icon: 'text-yellow-600',
    title: 'text-yellow-900',
    glow: 'shadow-yellow-200'
  },
  success: {
    container: 'bg-gradient-to-br from-green-50 to-emerald-50 border-green-400 text-green-900 shadow-lg shadow-green-100/50',
    icon: 'text-green-600',
    title: 'text-green-900',
    glow: 'shadow-green-200'
  },
  error: {
    container: 'bg-gradient-to-br from-red-50 to-pink-50 border-red-400 text-red-900 shadow-lg shadow-red-100/50',
    icon: 'text-red-600',
    title: 'text-red-900',
    glow: 'shadow-red-200'
  },
  tip: {
    container: 'bg-gradient-to-br from-primary/10 to-primary/5 border-primary/40 text-foreground shadow-lg',
    icon: 'text-primary',
    title: 'text-foreground',
    glow: 'shadow-primary/20'
  },
  call: {
    container: 'bg-gradient-to-br from-primary to-primary/90 text-white border-primary shadow-xl',
    icon: 'text-white',
    title: 'text-white',
    glow: 'shadow-primary/50'
  },
  appointment: {
    container: 'bg-gradient-to-br from-secondary to-secondary/90 text-secondary-foreground border-secondary shadow-xl',
    icon: 'text-secondary-foreground',
    title: 'text-secondary-foreground',
    glow: 'shadow-secondary/50'
  },
  quote: {
    container: 'bg-gradient-to-br from-gray-900 to-gray-800 text-white border-gray-700 shadow-2xl',
    icon: 'text-gray-300',
    title: 'text-white',
    glow: 'shadow-gray-700'
  },
  emergency: {
    container: 'bg-gradient-to-br from-red-600 to-red-700 text-white border-red-800 shadow-2xl animate-pulse',
    icon: 'text-white',
    title: 'text-white',
    glow: 'shadow-red-500'
  }
};

const style = typeStyles[type];
---

<div class={`callout-box relative my-8 p-8 rounded-2xl border-2 overflow-hidden transition-all hover:scale-[1.02] ${style.container} ${animate ? 'animate-pulse' : ''} ${className}`}>
  {backgroundImage && (
    <>
      <div 
        class="absolute inset-0 bg-cover bg-center opacity-10" 
        style={`background-image: url('${backgroundImage}');`}
      ></div>
      <div class="absolute inset-0 backdrop-blur-sm"></div>
    </>
  )}
  
  <div class="relative z-10 flex gap-6">
    {icon && (
      <div class={`flex-shrink-0 ${style.icon}`}>
        <div class={`w-16 h-16 rounded-2xl bg-white/20 backdrop-blur-sm flex items-center justify-center ${style.glow} shadow-lg`}>
          {type === 'info' && <Info className="h-8 w-8" client:load />}
          {type === 'warning' && <AlertTriangle className="h-8 w-8" client:load />}
          {type === 'success' && <CheckCircle className="h-8 w-8" client:load />}
          {type === 'error' && <AlertCircle className="h-8 w-8" client:load />}
          {type === 'tip' && <Info className="h-8 w-8" client:load />}
          {type === 'call' && <Phone className="h-8 w-8" client:load />}
          {type === 'appointment' && <Calendar className="h-8 w-8" client:load />}
          {type === 'quote' && <Info className="h-8 w-8" client:load />}
          {type === 'emergency' && <AlertTriangle className="h-8 w-8" client:load />}
        </div>
      </div>
    )}
    <div class="flex-1">
      {title && (
        <h4 class={`font-bold text-2xl mb-3 ${style.title}`}>{title}</h4>
      )}
      <div class={`prose prose-lg max-w-none ${
        ['call', 'appointment', 'quote', 'emergency'].includes(type) ? 'prose-invert' : ''
      }`}>
        <slot />
      </div>
    </div>
  </div>
  
  {(type === 'call' || type === 'emergency') && (
    <div class="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full blur-3xl"></div>
  )}
  
  {type === 'tip' && (
    <div class="absolute -bottom-8 -right-8 w-24 h-24 bg-primary/20 rounded-full blur-2xl"></div>
  )}
</div>