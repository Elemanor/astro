---
export interface TimelineItem {
  date?: string;
  title: string;
  description?: string;
  duration?: string;
  milestone?: boolean;
  image?: string;
  status?: 'completed' | 'active' | 'upcoming';
}

export interface Props {
  title?: string;
  subtitle?: string;
  items: TimelineItem[];
  variant?: 'vertical' | 'horizontal' | 'cards' | 'roadmap';
  showImages?: boolean;
  animated?: boolean;
  class?: string;
}

const { 
  title,
  subtitle,
  items,
  variant = 'vertical',
  showImages = true,
  animated = true,
  class: className = ''
} = Astro.props;
---

<div class={`timeline-container my-12 ${className}`}>
  {(title || subtitle) && (
    <div class="text-center mb-12">
      {title && <h3 class="text-3xl md:text-4xl font-bold mb-4">{title}</h3>}
      {subtitle && <p class="text-xl text-muted-foreground max-w-3xl mx-auto">{subtitle}</p>}
    </div>
  )}
  
  {variant === 'vertical' && (
    <div class="relative max-w-4xl mx-auto">
      <div class="absolute left-8 top-0 bottom-0 w-1 bg-gradient-to-b from-primary via-primary/50 to-transparent rounded-full"></div>
      
      <div class="space-y-12">
        {items.map((item, index) => {
          const status = item.status || (index === 0 ? 'active' : index < 2 ? 'completed' : 'upcoming');
          return (
            <div class={`relative flex items-start gap-8 ${animated ? 'group' : ''}`}>
              <div class={`
                relative z-10 w-16 h-16 rounded-full flex items-center justify-center transition-all
                ${animated ? 'group-hover:scale-110' : ''}
                ${item.milestone 
                  ? 'bg-gradient-to-br from-primary to-primary/80 text-white shadow-xl ring-4 ring-primary/20' 
                  : status === 'completed' 
                    ? 'bg-green-500 text-white'
                    : status === 'active'
                      ? 'bg-primary text-white shadow-lg ring-4 ring-primary/30 animate-pulse'
                      : 'bg-gray-200 text-gray-600'
                }
              `}>
                <span class="text-lg font-bold">
                  {item.milestone ? '★' : status === 'completed' ? '✓' : index + 1}
                </span>
              </div>
              
              <div class="flex-1">
                <div class={`bg-white rounded-xl shadow-lg p-6 transition-all ${
                  animated ? 'group-hover:shadow-xl group-hover:-translate-y-1' : ''
                }`}>
                  <div class="flex flex-wrap items-center gap-4 mb-3">
                    <h4 class="text-xl font-bold">{item.title}</h4>
                    {(item.date || item.duration) && (
                      <span class="px-3 py-1 bg-primary/10 text-primary rounded-full text-sm font-medium">
                        {item.date || item.duration}
                      </span>
                    )}
                    {status === 'active' && (
                      <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium animate-pulse">
                        In Progress
                      </span>
                    )}
                  </div>
                  
                  {item.description && (
                    <p class="text-muted-foreground mb-4">{item.description}</p>
                  )}
                  
                  {showImages && item.image && (
                    <img 
                      src={item.image} 
                      alt={item.title}
                      class="w-full h-48 object-cover rounded-lg mt-4"
                    />
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  )}
  
  {variant === 'horizontal' && (
    <div class="overflow-x-auto pb-8">
      <div class="flex items-center gap-0 min-w-max">
        {items.map((item, index) => {
          const status = item.status || (index === 0 ? 'active' : index < 2 ? 'completed' : 'upcoming');
          return (
            <>
              <div class="flex flex-col items-center gap-4 min-w-[250px] px-4">
                <div class={`
                  w-20 h-20 rounded-full flex items-center justify-center transition-all
                  ${animated ? 'hover:scale-110' : ''}
                  ${item.milestone 
                    ? 'bg-gradient-to-br from-primary to-primary/80 text-white shadow-xl' 
                    : status === 'completed' 
                      ? 'bg-green-500 text-white'
                      : status === 'active'
                        ? 'bg-primary text-white shadow-lg animate-pulse'
                        : 'bg-gray-200 text-gray-600'
                  }
                `}>
                  <span class="text-xl font-bold">
                    {item.milestone ? '★' : status === 'completed' ? '✓' : index + 1}
                  </span>
                </div>
                
                <div class="text-center bg-white rounded-lg shadow-md p-4 w-full">
                  <h4 class="font-bold text-lg mb-2">{item.title}</h4>
                  {(item.date || item.duration) && (
                    <p class="text-sm text-primary font-medium mb-2">
                      {item.date || item.duration}
                    </p>
                  )}
                  {item.description && (
                    <p class="text-sm text-muted-foreground">
                      {item.description}
                    </p>
                  )}
                </div>
              </div>
              
              {index < items.length - 1 && (
                <div class="flex items-center h-20 -mx-2">
                  <div class="w-24 h-1 bg-gradient-to-r from-primary/30 to-primary/60"></div>
                  <div class="w-0 h-0 border-t-8 border-t-transparent border-b-8 border-b-transparent border-l-8 border-l-primary/60"></div>
                </div>
              )}
            </>
          );
        })}
      </div>
    </div>
  )}
  
  {variant === 'cards' && (
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {items.map((item, index) => {
        const status = item.status || (index === 0 ? 'active' : index < 2 ? 'completed' : 'upcoming');
        return (
          <div class={`relative overflow-hidden rounded-2xl shadow-lg transition-all ${
            animated ? 'hover:shadow-2xl hover:-translate-y-1' : ''
          } ${
            status === 'active' ? 'ring-2 ring-primary' : ''
          }`}>
            {showImages && item.image && (
              <div class="h-48 overflow-hidden">
                <img 
                  src={item.image} 
                  alt={item.title}
                  class="w-full h-full object-cover"
                />
              </div>
            )}
            
            <div class="p-6 bg-white">
              <div class="flex items-center justify-between mb-4">
                <div class={`
                  w-12 h-12 rounded-full flex items-center justify-center text-sm font-bold
                  ${item.milestone 
                    ? 'bg-primary text-white' 
                    : status === 'completed' 
                      ? 'bg-green-100 text-green-700'
                      : status === 'active'
                        ? 'bg-primary text-white animate-pulse'
                        : 'bg-gray-100 text-gray-600'
                  }
                `}>
                  {item.milestone ? '★' : status === 'completed' ? '✓' : index + 1}
                </div>
                
                {(item.date || item.duration) && (
                  <span class="text-sm text-muted-foreground font-medium">
                    {item.date || item.duration}
                  </span>
                )}
              </div>
              
              <h4 class="text-xl font-bold mb-2">{item.title}</h4>
              
              {item.description && (
                <p class="text-muted-foreground">{item.description}</p>
              )}
              
              {status === 'active' && (
                <div class="mt-4 pt-4 border-t">
                  <div class="flex items-center gap-2">
                    <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <span class="text-sm text-green-700 font-medium">Currently Active</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        );
      })}
    </div>
  )}
  
  {variant === 'roadmap' && (
    <div class="relative bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl p-8 md:p-12">
      <div class="absolute inset-0 opacity-5">
        <div class="absolute inset-0" style="background-image: radial-gradient(circle at 20% 50%, #1e40af 0%, transparent 50%);"></div>
      </div>
      
      <div class="relative z-10 space-y-8">
        {items.map((item, index) => {
          const isLeft = index % 2 === 0;
          return (
            <div class={`flex items-center gap-8 ${
              isLeft ? 'flex-row' : 'flex-row-reverse'
            }`}>
              <div class="flex-1">
                <div class={`bg-white rounded-2xl shadow-xl p-8 transition-all ${
                  animated ? 'hover:shadow-2xl' : ''
                }`}>
                  <div class="flex items-center gap-4 mb-4">
                    <div class={`
                      w-14 h-14 rounded-2xl flex items-center justify-center font-bold text-lg
                      ${item.milestone 
                        ? 'bg-gradient-to-br from-primary to-primary/80 text-white shadow-lg' 
                        : 'bg-gradient-to-br from-gray-100 to-gray-200 text-gray-700'
                      }
                    `}>
                      {index + 1}
                    </div>
                    <div>
                      <h4 class="text-2xl font-bold">{item.title}</h4>
                      {(item.date || item.duration) && (
                        <p class="text-primary font-medium">
                          {item.date || item.duration}
                        </p>
                      )}
                    </div>
                  </div>
                  
                  {item.description && (
                    <p class="text-muted-foreground text-lg">{item.description}</p>
                  )}
                </div>
              </div>
              
              <div class="hidden md:block w-px h-24 bg-gradient-to-b from-transparent via-primary/30 to-transparent"></div>
              
              <div class="flex-1">
                {showImages && item.image && (
                  <img 
                    src={item.image} 
                    alt={item.title}
                    class="w-full max-w-md mx-auto rounded-2xl shadow-lg"
                  />
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  )}
</div>