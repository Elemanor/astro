---
import { Check, X, Star, TrendingUp, AlertCircle } from 'lucide-react';

export interface ComparisonItem {
  feature: string;
  category?: string;
  options: (string | boolean | { text: string; highlight?: boolean })[];
}

export interface Props {
  title?: string;
  subtitle?: string;
  headers: string[];
  items: ComparisonItem[];
  highlightColumn?: number;
  variant?: 'default' | 'modern' | 'gradient' | 'cards';
  showLegend?: boolean;
  class?: string;
}

const { 
  title,
  subtitle,
  headers,
  items,
  highlightColumn,
  variant = 'default',
  showLegend = true,
  class: className = ''
} = Astro.props;

// Group items by category
const groupedItems = items.reduce((acc, item) => {
  const category = item.category || 'General';
  if (!acc[category]) acc[category] = [];
  acc[category].push(item);
  return acc;
}, {} as Record<string, typeof items>);
---

<div class={`comparison-table my-12 ${className}`}>
  {(title || subtitle) && (
    <div class="text-center mb-8">
      {title && <h3 class="text-3xl md:text-4xl font-bold mb-4">{title}</h3>}
      {subtitle && <p class="text-xl text-muted-foreground max-w-3xl mx-auto">{subtitle}</p>}
    </div>
  )}
  
  {variant === 'default' && (
    <div class="overflow-x-auto rounded-2xl shadow-2xl bg-white">
      <table class="w-full">
        <thead>
          <tr class="bg-gray-50">
            <th class="text-left py-6 px-6 font-bold text-lg text-gray-900 min-w-[200px]">
              Features
            </th>
            {headers.map((header, index) => (
              <th class={`text-center py-6 px-6 min-w-[150px] ${
                highlightColumn === index 
                  ? 'bg-primary text-white relative' 
                  : 'text-gray-900'
              }`}>
                <div class="font-bold text-lg mb-1">{header}</div>
                {highlightColumn === index && (
                  <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <div class="bg-yellow-400 text-primary px-3 py-1 rounded-full text-xs font-bold shadow-lg flex items-center gap-1">
                      <Star className="h-3 w-3" />
                      BEST VALUE
                    </div>
                  </div>
                )}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {Object.entries(groupedItems).map(([category, categoryItems], categoryIndex) => (
            <>
              {Object.keys(groupedItems).length > 1 && (
                <tr class="bg-gray-100">
                  <td colspan={headers.length + 1} class="py-3 px-6 font-semibold text-sm text-gray-700 uppercase tracking-wider">
                    {category}
                  </td>
                </tr>
              )}
              {categoryItems.map((item, itemIndex) => (
                <tr class={`border-b border-gray-200 hover:bg-gray-50 transition-colors ${
                  itemIndex % 2 === 0 ? 'bg-white' : 'bg-gray-50/50'
                }`}>
                  <td class="py-5 px-6">
                    <div class="font-medium text-gray-900">{item.feature}</div>
                  </td>
                  {item.options.map((option, colIndex) => {
                    const isHighlighted = highlightColumn === colIndex;
                    let content: any;
                    
                    if (typeof option === 'boolean') {
                      content = option ? (
                        <div class="flex items-center justify-center">
                          <div class="w-10 h-10 bg-green-100 text-green-700 rounded-full flex items-center justify-center">
                            <Check className="h-6 w-6" strokeWidth={3} />
                          </div>
                        </div>
                      ) : (
                        <div class="flex items-center justify-center">
                          <div class="w-10 h-10 bg-red-100 text-red-600 rounded-full flex items-center justify-center">
                            <X className="h-6 w-6" strokeWidth={3} />
                          </div>
                        </div>
                      );
                    } else if (typeof option === 'object') {
                      content = (
                        <div class={`font-medium ${option.highlight ? 'text-primary' : 'text-gray-900'}`}>
                          {option.highlight && <TrendingUp className="inline h-4 w-4 mr-1" />}
                          <span class={option.highlight ? 'text-lg' : ''}>{option.text}</span>
                        </div>
                      );
                    } else {
                      content = <div class="text-gray-900 font-medium">{option}</div>;
                    }
                    
                    return (
                      <td class={`text-center py-5 px-6 ${
                        isHighlighted ? 'bg-primary/5 relative' : ''
                      }`}>
                        {isHighlighted && (
                          <div class="absolute inset-y-0 left-0 w-1 bg-primary"></div>
                        )}
                        {content}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </>
          ))}
        </tbody>
      </table>
    </div>
  )}
  
  {variant === 'modern' && (
    <div class="space-y-8">
      {/* Header Cards */}
      <div class="grid grid-cols-1 md:grid-cols-{headers.length + 1} gap-4 mb-8">
        <div class="hidden md:block"></div>
        {headers.map((header, index) => (
          <div class={`relative p-6 rounded-2xl text-center shadow-lg transform transition-all hover:scale-105 ${
            highlightColumn === index 
              ? 'bg-gradient-to-br from-primary to-primary/80 text-white' 
              : 'bg-white border border-gray-200'
          }`}>
            {highlightColumn === index && (
              <div class="absolute -top-3 left-1/2 transform -translate-x-1/2">
                <div class="bg-yellow-400 text-primary px-4 py-1 rounded-full text-sm font-bold shadow-lg flex items-center gap-1">
                  <Star className="h-4 w-4" />
                  RECOMMENDED
                </div>
              </div>
            )}
            <h4 class="text-2xl font-bold mb-2">{header}</h4>
            {highlightColumn === index && (
              <p class="text-white/90 text-sm">Best overall value</p>
            )}
          </div>
        ))}
      </div>
      
      {/* Feature Rows */}
      {Object.entries(groupedItems).map(([category, categoryItems]) => (
        <div class="space-y-4">
          {Object.keys(groupedItems).length > 1 && (
            <h4 class="text-lg font-bold text-gray-700 uppercase tracking-wider mb-4 flex items-center gap-2">
              <div class="w-8 h-0.5 bg-primary"></div>
              {category}
            </h4>
          )}
          
          {categoryItems.map((item) => (
            <div class="bg-white rounded-xl shadow-md overflow-hidden">
              <div class="grid grid-cols-1 md:grid-cols-{headers.length + 1}">
                <div class="p-6 bg-gray-50 font-semibold text-lg flex items-center">
                  {item.feature}
                </div>
                {item.options.map((option, colIndex) => {
                  const isHighlighted = highlightColumn === colIndex;
                  let content: any;
                  
                  if (typeof option === 'boolean') {
                    content = option ? (
                      <div class="flex flex-col items-center gap-2">
                        <div class="w-14 h-14 bg-green-500 text-white rounded-2xl flex items-center justify-center shadow-lg transform hover:scale-110 transition-transform">
                          <Check className="h-8 w-8" strokeWidth={3} />
                        </div>
                        <span class="text-green-700 font-semibold">Yes</span>
                      </div>
                    ) : (
                      <div class="flex flex-col items-center gap-2">
                        <div class="w-14 h-14 bg-gray-300 text-gray-600 rounded-2xl flex items-center justify-center">
                          <X className="h-8 w-8" strokeWidth={3} />
                        </div>
                        <span class="text-gray-500">No</span>
                      </div>
                    );
                  } else if (typeof option === 'object') {
                    content = (
                      <div class="text-center">
                        <div class={`text-lg font-bold ${option.highlight ? 'text-primary' : 'text-gray-900'}`}>
                          {option.text}
                        </div>
                        {option.highlight && (
                          <div class="text-sm text-primary/70 mt-1">Best choice</div>
                        )}
                      </div>
                    );
                  } else {
                    content = <div class="text-center text-lg font-medium text-gray-900">{option}</div>;
                  }
                  
                  return (
                    <div class={`p-6 flex items-center justify-center ${
                      isHighlighted 
                        ? 'bg-primary/10 ring-2 ring-primary/30 ring-inset' 
                        : ''
                    }`}>
                      {content}
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>
  )}
  
  {variant === 'cards' && (
    <div class="grid grid-cols-1 md:grid-cols-{headers.length} gap-6">
      {headers.map((header, colIndex) => {
        const isHighlighted = highlightColumn === colIndex;
        return (
          <div class={`rounded-3xl shadow-xl overflow-hidden transform transition-all hover:scale-105 ${
            isHighlighted 
              ? 'ring-4 ring-primary/50 shadow-2xl' 
              : ''
          }`}>
            {/* Card Header */}
            <div class={`p-8 text-center relative ${
              isHighlighted 
                ? 'bg-gradient-to-br from-primary to-primary/80 text-white' 
                : 'bg-gradient-to-br from-gray-100 to-gray-50'
            }`}>
              {isHighlighted && (
                <div class="absolute top-4 right-4">
                  <div class="bg-yellow-400 text-primary px-3 py-1 rounded-full text-xs font-bold shadow-lg">
                    POPULAR
                  </div>
                </div>
              )}
              <h4 class="text-3xl font-bold mb-2">{header}</h4>
              {isHighlighted && (
                <p class="text-white/90">Recommended for most homes</p>
              )}
            </div>
            
            {/* Card Body */}
            <div class="bg-white p-6 space-y-4">
              {items.map((item, rowIndex) => {
                const option = item.options[colIndex];
                let content: any;
                
                if (typeof option === 'boolean') {
                  content = option ? (
                    <div class="flex items-center justify-between">
                      <span class="font-medium">{item.feature}</span>
                      <Check className="h-5 w-5 text-green-600" strokeWidth={3} />
                    </div>
                  ) : (
                    <div class="flex items-center justify-between text-gray-400">
                      <span class="line-through">{item.feature}</span>
                      <X className="h-5 w-5" />
                    </div>
                  );
                } else if (typeof option === 'object') {
                  content = (
                    <div class="space-y-1">
                      <div class="font-medium">{item.feature}</div>
                      <div class={`text-lg font-bold ${option.highlight ? 'text-primary' : ''}`}>
                        {option.text}
                      </div>
                    </div>
                  );
                } else {
                  content = (
                    <div class="space-y-1">
                      <div class="font-medium">{item.feature}</div>
                      <div class="text-lg font-semibold text-gray-900">{option}</div>
                    </div>
                  );
                }
                
                return (
                  <div class={`pb-4 ${rowIndex < items.length - 1 ? 'border-b border-gray-200' : ''}`}>
                    {content}
                  </div>
                );
              })}
            </div>
            
            {/* Card Footer */}
            <div class="p-6 bg-gray-50">
              <button class={`w-full py-4 rounded-xl font-bold text-lg transition-all transform hover:scale-105 ${
                isHighlighted 
                  ? 'bg-primary text-white shadow-lg' 
                  : 'bg-white text-gray-900 border-2 border-gray-300 hover:border-primary'
              }`}>
                {isHighlighted ? 'Get Started' : 'Learn More'}
              </button>
            </div>
          </div>
        );
      })}
    </div>
  )}
  
  {variant === 'gradient' && (
    <div class="bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 rounded-3xl p-8 md:p-12 text-white overflow-hidden relative">
      <div class="absolute inset-0 opacity-10">
        <div class="absolute inset-0" style="background-image: radial-gradient(circle at 30% 70%, #1e40af 0%, transparent 50%), radial-gradient(circle at 70% 30%, #7c3aed 0%, transparent 50%);"></div>
      </div>
      
      <div class="relative z-10">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b-2 border-gray-700">
                <th class="text-left py-6 px-6 font-bold text-xl min-w-[200px]">Features</th>
                {headers.map((header, index) => (
                  <th class={`text-center py-6 px-6 font-bold text-xl min-w-[150px] relative ${
                    highlightColumn === index 
                      ? 'text-yellow-400' 
                      : ''
                  }`}>
                    {header}
                    {highlightColumn === index && (
                      <div class="absolute -bottom-3 left-1/2 transform -translate-x-1/2">
                        <Star className="h-6 w-6 text-yellow-400 fill-yellow-400" />
                      </div>
                    )}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {items.map((item, rowIndex) => (
                <tr class={`border-b border-gray-700/50 ${
                  rowIndex % 2 === 0 ? 'bg-white/5' : ''
                }`}>
                  <td class="py-5 px-6 font-medium text-gray-300">{item.feature}</td>
                  {item.options.map((option, colIndex) => {
                    const isHighlighted = highlightColumn === colIndex;
                    let content: any;
                    
                    if (typeof option === 'boolean') {
                      content = option ? (
                        <span class="text-green-400 text-3xl">✓</span>
                      ) : (
                        <span class="text-gray-600 text-3xl">✗</span>
                      );
                    } else if (typeof option === 'object') {
                      content = (
                        <span class={`font-bold ${
                          option.highlight ? 'text-yellow-400 text-xl' : 'text-white'
                        }`}>
                          {option.text}
                        </span>
                      );
                    } else {
                      content = <span class={`${isHighlighted ? 'text-yellow-400 font-bold' : 'text-gray-300'}`}>{option}</span>;
                    }
                    
                    return (
                      <td class={`text-center py-5 px-6 ${
                        isHighlighted ? 'bg-white/10' : ''
                      }`}>
                        {content}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )}
  
  {showLegend && variant !== 'cards' && (
    <div class="mt-8 flex flex-wrap items-center justify-center gap-8 text-sm">
      <div class="flex items-center gap-3">
        <div class="w-8 h-8 bg-green-100 text-green-700 rounded-full flex items-center justify-center">
          <Check className="h-5 w-5" strokeWidth={3} />
        </div>
        <span class="text-gray-700 font-medium">Feature Included</span>
      </div>
      <div class="flex items-center gap-3">
        <div class="w-8 h-8 bg-red-100 text-red-600 rounded-full flex items-center justify-center">
          <X className="h-5 w-5" strokeWidth={3} />
        </div>
        <span class="text-gray-700 font-medium">Not Available</span>
      </div>
      <div class="flex items-center gap-3">
        <Star className="h-5 w-5 text-yellow-500 fill-yellow-500" />
        <span class="text-gray-700 font-medium">Best Value Option</span>
      </div>
    </div>
  )}
</div>