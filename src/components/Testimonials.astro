---
import { ScrollAnimation } from './ScrollAnimation';
import { Card, CardContent } from './ui/card';

export interface Testimonial {
  name: string;
  location?: string;
  rating: number;
  text: string;
  service?: string;
  serviceLink?: string;
  date?: string;
  image?: string;
  verified?: boolean;
}

export interface Props {
  heading?: string;
  headingAccent?: string;
  subheading?: string;
  testimonials: Testimonial[];
  columns?: 1 | 2 | 3; // Number of columns on desktop
  variant?: 'default' | 'compact' | 'featured' | 'minimal';
  showOverallRating?: boolean;
  overallRating?: number;
  totalReviews?: number;
  ctaText?: string;
  ctaLink?: string;
  background?: 'white' | 'gray';
}

const {
  heading = "What",
  headingAccent = "Customers Say",
  subheading = "Join thousands of satisfied customers",
  testimonials,
  columns = 3,
  variant = 'default',
  showOverallRating = true,
  overallRating = 4.9,
  totalReviews = 847,
  ctaText = "Get Your Free Quote",
  ctaLink = "/quote",
  background = 'gray'
} = Astro.props;

const backgroundClasses = {
  white: 'bg-white',
  gray: 'bg-gray-50'
};

const gridClasses = {
  1: '',
  2: 'md:grid-cols-2',
  3: 'md:grid-cols-2 lg:grid-cols-3'
};

// Function to render stars
const renderStars = (rating: number) => {
  const stars = [];
  const fullStars = Math.floor(rating);
  const hasHalfStar = rating % 1 >= 0.5;
  
  for (let i = 0; i < fullStars; i++) {
    stars.push('full');
  }
  if (hasHalfStar && stars.length < 5) {
    stars.push('half');
  }
  while (stars.length < 5) {
    stars.push('empty');
  }
  return stars;
};
---

<section class={`py-12 sm:py-16 lg:py-24 ${backgroundClasses[background]}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    {(heading || subheading || showOverallRating) && (
      <ScrollAnimation animation="fadeUp" client:visible>
        <div class="text-center mb-12">
          {(heading || headingAccent) && (
            <h2 class="text-3xl sm:text-4xl lg:text-5xl font-montserrat font-light mb-4">
              {heading && <span set:html={heading}></span>}
              {headingAccent && (
                <>
                  {heading && ' '}
                  <span class="font-bold">{headingAccent}</span>
                </>
              )}
            </h2>
          )}
          {subheading && (
            <p class="text-lg text-gray-600 max-w-2xl mx-auto">
              {subheading}
            </p>
          )}
          
          {showOverallRating && (
            <div class="flex items-center justify-center gap-2 mt-6">
              <div class="flex">
                {renderStars(overallRating).map((star) => (
                  <svg class="w-6 h-6 text-yellow-400 fill-current" viewBox="0 0 20 20">
                    {star === 'full' ? (
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    ) : star === 'half' ? (
                      <>
                        <defs>
                          <linearGradient id="half-star">
                            <stop offset="50%" stop-color="currentColor"/>
                            <stop offset="50%" stop-color="transparent"/>
                          </linearGradient>
                        </defs>
                        <path fill="url(#half-star)" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        <path fill="none" stroke="currentColor" stroke-width="1" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                      </>
                    ) : (
                      <path fill="none" stroke="currentColor" stroke-width="1" d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    )}
                  </svg>
                ))}
              </div>
              <span class="text-lg font-semibold">{overallRating}/5</span>
              {totalReviews && (
                <span class="text-gray-600">({totalReviews} reviews)</span>
              )}
            </div>
          )}
        </div>
      </ScrollAnimation>
    )}

    {/* Testimonials Grid */}
    {variant === 'featured' && testimonials.length > 0 && (
      /* Featured variant - single large testimonial */
      <ScrollAnimation animation="fadeUp" client:visible>
        <div class="max-w-3xl mx-auto">
          <Card className="shadow-xl">
            <CardContent className="p-8 sm:p-12">
              <div class="flex mb-4">
                {renderStars(testimonials[0].rating).map((star) => (
                  <svg class="w-6 h-6 text-yellow-400 fill-current" viewBox="0 0 20 20">
                    {star === 'full' && (
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    )}
                  </svg>
                ))}
              </div>
              <blockquote class="text-xl text-gray-700 mb-6 italic">
                "{testimonials[0].text}"
              </blockquote>
              <div class="flex items-center gap-4">
                {testimonials[0].image && (
                  <img 
                    src={testimonials[0].image} 
                    alt={testimonials[0].name}
                    class="w-16 h-16 rounded-full object-cover"
                  />
                )}
                <div>
                  <p class="font-semibold text-gray-900">{testimonials[0].name}</p>
                  {testimonials[0].location && (
                    <p class="text-gray-600">{testimonials[0].location}</p>
                  )}
                  {testimonials[0].service && (
                    <p class="text-sm text-gray-500">{testimonials[0].service}</p>
                  )}
                </div>
                {testimonials[0].verified && (
                  <div class="ml-auto">
                    <span class="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full flex items-center gap-1">
                      <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                      </svg>
                      Verified
                    </span>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </ScrollAnimation>
    )}

    {variant !== 'featured' && (
      <div class={`grid grid-cols-1 ${gridClasses[columns]} gap-6`}>
        {testimonials.map((testimonial, index) => (
          <ScrollAnimation 
            animation={index % 2 === 0 ? "fadeUp" : "fadeDown"} 
            delay={index * 0.1} 
            client:visible
          >
            {variant === 'minimal' ? (
              /* Minimal variant */
              <div class="text-center p-6">
                <div class="flex justify-center mb-3">
                  {renderStars(testimonial.rating).map((star) => (
                    <svg class="w-5 h-5 text-yellow-400 fill-current" viewBox="0 0 20 20">
                      {star === 'full' && (
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                      )}
                    </svg>
                  ))}
                </div>
                <p class="text-gray-700 mb-4 italic">"{testimonial.text}"</p>
                <p class="font-semibold text-gray-900">{testimonial.name}</p>
                {testimonial.location && (
                  <p class="text-sm text-gray-600">{testimonial.location}</p>
                )}
              </div>
            ) : variant === 'compact' ? (
              /* Compact variant */
              <div class="bg-white rounded-lg p-4 shadow hover:shadow-lg transition-shadow">
                <div class="flex items-start gap-3">
                  {testimonial.image && (
                    <img 
                      src={testimonial.image} 
                      alt={testimonial.name}
                      class="w-10 h-10 rounded-full object-cover flex-shrink-0"
                    />
                  )}
                  <div class="flex-grow">
                    <div class="flex items-center justify-between mb-2">
                      <p class="font-semibold text-gray-900">{testimonial.name}</p>
                      <div class="flex">
                        {renderStars(testimonial.rating).slice(0, 5).map((star) => (
                          <svg class="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                            {star === 'full' && (
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                            )}
                          </svg>
                        ))}
                      </div>
                    </div>
                    <p class="text-sm text-gray-700 line-clamp-3">"{testimonial.text}"</p>
                    {testimonial.date && (
                      <p class="text-xs text-gray-500 mt-2">{testimonial.date}</p>
                    )}
                  </div>
                </div>
              </div>
            ) : (
              /* Default variant */
              <Card className="h-full hover:shadow-lg transition-shadow">
                <CardContent className="p-6">
                  <div class="flex mb-3">
                    {renderStars(testimonial.rating).map((star) => (
                      <svg class="w-5 h-5 text-yellow-400 fill-current" viewBox="0 0 20 20">
                        {star === 'full' && (
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        )}
                      </svg>
                    ))}
                  </div>
                  
                  <p class="text-gray-700 mb-4 italic">"{testimonial.text}"</p>
                  
                  <div class="border-t pt-4">
                    <div class="flex items-center justify-between">
                      <div>
                        <p class="font-semibold text-gray-900">{testimonial.name}</p>
                        {testimonial.location && (
                          <p class="text-sm text-gray-600">{testimonial.location}</p>
                        )}
                      </div>
                      {testimonial.service && (
                        <div class="text-right">
                          {testimonial.serviceLink ? (
                            <a href={testimonial.serviceLink} class="text-xs text-primary hover:underline">
                              {testimonial.service}
                            </a>
                          ) : (
                            <p class="text-xs text-gray-500">{testimonial.service}</p>
                          )}
                          {testimonial.date && (
                            <p class="text-xs text-gray-400">{testimonial.date}</p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}
          </ScrollAnimation>
        ))}
      </div>
    )}

    {/* CTA */}
    {ctaText && ctaLink && (
      <ScrollAnimation animation="fadeUp" delay={0.5} client:visible>
        <div class="text-center mt-12">
          <a 
            href={ctaLink} 
            class="inline-flex items-center bg-primary text-white px-6 py-3 rounded-lg font-semibold hover:bg-primary/90 transition-colors"
          >
            {ctaText}
            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
            </svg>
          </a>
        </div>
      </ScrollAnimation>
    )}
  </div>
</section>

<style>
  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }
</style>