---
import { ScrollAnimation } from './ScrollAnimation';

export interface ProcessStep {
  number?: string;
  title: string;
  description: string;
  icon?: string; // Emoji or SVG path
  iconType?: 'emoji' | 'svg';
  duration?: string;
  highlight?: boolean;
  image?: string;
  details?: string[];
}

export interface Props {
  heading?: string;
  headingAccent?: string;
  subheading?: string;
  steps: ProcessStep[];
  variant?: 'timeline' | 'vertical' | 'cards' | 'minimal' | 'numbered';
  showDuration?: boolean;
  showNumbers?: boolean;
  background?: 'white' | 'gray' | 'gradient';
  connectionLine?: boolean;
}

const {
  heading = "Our",
  headingAccent = "Process",
  subheading = "From inspection to installation, we make it simple and stress-free",
  steps,
  variant = 'timeline',
  showDuration = true,
  showNumbers = true,
  background = 'gradient',
  connectionLine = true
} = Astro.props;

const backgroundClasses = {
  white: 'bg-white',
  gray: 'bg-gray-50',
  gradient: 'bg-gradient-to-b from-white to-gray-50'
};

// Generate step numbers if not provided
const stepsWithNumbers = steps.map((step, index) => ({
  ...step,
  number: step.number || String(index + 1).padStart(2, '0')
}));

// Default icons if none provided
const defaultIcons = ['üîç', 'üìã', 'üîß', 'üõ°Ô∏è'];
---

<section class={`py-12 sm:py-16 lg:py-24 ${backgroundClasses[background]}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <ScrollAnimation animation="fadeUp" client:visible>
      <div class="text-center mb-12 lg:mb-16">
        <h2 class="text-3xl sm:text-4xl lg:text-5xl font-montserrat font-light mb-4">
          {heading} <span class="font-bold">{headingAccent}</span>
        </h2>
        {subheading && (
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            {subheading}
          </p>
        )}
      </div>
    </ScrollAnimation>

    {variant === 'timeline' ? (
      /* Timeline variant - horizontal on desktop, vertical on mobile */
      <>
        {/* Desktop Timeline */}
        <div class="hidden lg:block relative">
          {connectionLine && (
            <div class="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-300 -translate-y-1/2"></div>
          )}
          
          <div class={`grid grid-cols-${stepsWithNumbers.length} gap-8 relative`}>
            {stepsWithNumbers.map((step, index) => (
              <ScrollAnimation animation="zoomIn" delay={index * 0.15} client:visible>
                <div class="relative">
                  {/* Step Circle */}
                  <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-12 h-12 bg-white rounded-full flex items-center justify-center border-4 border-primary z-10">
                    {step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                      <span class="text-xl">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                    ) : step.icon ? (
                      <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={step.icon} />
                      </svg>
                    ) : (
                      <span class="text-xl">{defaultIcons[index % defaultIcons.length]}</span>
                    )}
                  </div>
                  
                  {/* Content Card */}
                  <div class={`bg-white rounded-lg shadow-lg p-6 pt-16 hover:shadow-xl transition-shadow ${
                    step.highlight ? 'ring-2 ring-primary' : ''
                  }`}>
                    {showNumbers && (
                      <div class="text-5xl font-bold text-gray-100 mb-2">{step.number}</div>
                    )}
                    <h3 class="text-xl font-semibold mb-2">{step.title}</h3>
                    <p class="text-gray-600 text-sm mb-3">{step.description}</p>
                    {showDuration && step.duration && (
                      <div class="flex items-center text-sm text-primary font-medium">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        {step.duration}
                      </div>
                    )}
                  </div>
                </div>
              </ScrollAnimation>
            ))}
          </div>
        </div>

        {/* Mobile Timeline */}
        <div class="lg:hidden space-y-6">
          {stepsWithNumbers.map((step, index) => (
            <ScrollAnimation animation="fadeLeft" delay={index * 0.1} client:visible>
              <div class="flex gap-4">
                {/* Step Number/Icon */}
                <div class="flex-shrink-0">
                  <div class="w-12 h-12 bg-primary text-white rounded-full flex items-center justify-center font-bold">
                    {showNumbers ? step.number : (
                      step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                        <span>{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                      ) : (
                        <span>{defaultIcons[index % defaultIcons.length]}</span>
                      )
                    )}
                  </div>
                  {connectionLine && index < stepsWithNumbers.length - 1 && (
                    <div class="w-0.5 h-full bg-gray-300 mx-auto mt-2"></div>
                  )}
                </div>
                
                {/* Content */}
                <div class="flex-1 bg-white rounded-lg shadow p-4 sm:p-6">
                  <div class="flex items-center gap-2 mb-2">
                    {step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                      <span class="text-2xl">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                    ) : step.icon ? (
                      <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={step.icon} />
                      </svg>
                    ) : (
                      <span class="text-2xl">{defaultIcons[index % defaultIcons.length]}</span>
                    )}
                    <h3 class="text-lg font-semibold">{step.title}</h3>
                  </div>
                  <p class="text-gray-600 text-sm mb-2">{step.description}</p>
                  {showDuration && step.duration && (
                    <div class="flex items-center text-sm text-primary font-medium">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      {step.duration}
                    </div>
                  )}
                </div>
              </div>
            </ScrollAnimation>
          ))}
        </div>
      </>
    ) : variant === 'vertical' ? (
      /* Vertical variant - always vertical with connection line */
      <div class="max-w-3xl mx-auto">
        <div class="relative">
          {connectionLine && (
            <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gray-300"></div>
          )}
          
          <div class="space-y-8">
            {stepsWithNumbers.map((step, index) => (
              <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
                <div class="flex gap-6">
                  <div class="relative flex-shrink-0">
                    <div class={`w-16 h-16 rounded-full flex items-center justify-center font-bold text-lg z-10 relative ${
                      step.highlight ? 'bg-primary text-white' : 'bg-white border-4 border-primary text-primary'
                    }`}>
                      {showNumbers ? step.number : (
                        step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                          <span class="text-2xl">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                        ) : (
                          <span class="text-2xl">{defaultIcons[index % defaultIcons.length]}</span>
                        )
                      )}
                    </div>
                  </div>
                  
                  <div class="flex-grow bg-white rounded-lg shadow-lg p-6">
                    <div class="flex items-start justify-between mb-3">
                      <div>
                        <h3 class="text-xl font-bold text-gray-900">{step.title}</h3>
                        {showDuration && step.duration && (
                          <p class="text-sm text-primary font-medium mt-1">{step.duration}</p>
                        )}
                      </div>
                      {step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                        <span class="text-3xl">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                      ) : step.icon ? (
                        <svg class="w-8 h-8 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={step.icon} />
                        </svg>
                      ) : (
                        <span class="text-3xl">{defaultIcons[index % defaultIcons.length]}</span>
                      )}
                    </div>
                    <p class="text-gray-600">{step.description}</p>
                    {step.details && step.details.length > 0 && (
                      <ul class="mt-4 space-y-2">
                        {step.details.map((detail) => (
                          <li class="flex items-start gap-2 text-sm text-gray-600">
                            <svg class="w-4 h-4 text-primary mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                            </svg>
                            <span>{detail}</span>
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>
              </ScrollAnimation>
            ))}
          </div>
        </div>
      </div>
    ) : variant === 'cards' ? (
      /* Cards variant - grid layout */
      <div class={`grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-${Math.min(stepsWithNumbers.length, 4)} gap-6`}>
        {stepsWithNumbers.map((step, index) => (
          <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
            <div class={`bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow h-full ${
              step.highlight ? 'ring-2 ring-primary' : ''
            }`}>
              <div class="flex items-center justify-between mb-4">
                {showNumbers && (
                  <span class="text-4xl font-bold text-gray-200">{step.number}</span>
                )}
                {step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                  <span class="text-3xl">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                ) : step.icon ? (
                  <div class="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                    <svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={step.icon} />
                    </svg>
                  </div>
                ) : (
                  <span class="text-3xl">{defaultIcons[index % defaultIcons.length]}</span>
                )}
              </div>
              <h3 class="text-xl font-bold mb-2">{step.title}</h3>
              <p class="text-gray-600 mb-3">{step.description}</p>
              {showDuration && step.duration && (
                <p class="text-sm text-primary font-medium">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  {step.duration}
                </p>
              )}
            </div>
          </ScrollAnimation>
        ))}
      </div>
    ) : variant === 'minimal' ? (
      /* Minimal variant - simple list */
      <div class="max-w-3xl mx-auto">
        <div class="space-y-6">
          {stepsWithNumbers.map((step, index) => (
            <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
              <div class="flex items-start gap-4">
                <div class="flex-shrink-0">
                  {showNumbers ? (
                    <span class="text-2xl font-bold text-primary">{step.number}.</span>
                  ) : (
                    <div class="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                      <svg class="w-4 h-4 text-primary" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
                      </svg>
                    </div>
                  )}
                </div>
                <div class="flex-grow">
                  <h3 class="text-lg font-semibold mb-1">{step.title}</h3>
                  <p class="text-gray-600">{step.description}</p>
                  {showDuration && step.duration && (
                    <p class="text-sm text-gray-500 mt-1">{step.duration}</p>
                  )}
                </div>
              </div>
            </ScrollAnimation>
          ))}
        </div>
      </div>
    ) : (
      /* Numbered variant - emphasis on numbers */
      <div class="max-w-4xl mx-auto">
        <div class="space-y-8">
          {stepsWithNumbers.map((step, index) => (
            <ScrollAnimation animation="fadeUp" delay={index * 0.1} client:visible>
              <div class="flex items-center gap-6 bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
                <div class="flex-shrink-0">
                  <div class="w-20 h-20 bg-gradient-to-br from-primary to-blue-600 text-white rounded-lg flex items-center justify-center">
                    <span class="text-3xl font-bold">{step.number}</span>
                  </div>
                </div>
                <div class="flex-grow">
                  <h3 class="text-xl font-bold mb-2">{step.title}</h3>
                  <p class="text-gray-600">{step.description}</p>
                  {showDuration && step.duration && (
                    <div class="flex items-center gap-4 mt-3">
                      <span class="text-sm text-primary font-medium">
                        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        {step.duration}
                      </span>
                    </div>
                  )}
                </div>
                {step.iconType === 'emoji' || (!step.iconType && step.icon && step.icon.length <= 2) ? (
                  <span class="text-4xl hidden sm:block">{step.icon || defaultIcons[index % defaultIcons.length]}</span>
                ) : step.icon ? (
                  <svg class="w-12 h-12 text-gray-400 hidden sm:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={step.icon} />
                  </svg>
                ) : (
                  <span class="text-4xl hidden sm:block">{defaultIcons[index % defaultIcons.length]}</span>
                )}
              </div>
            </ScrollAnimation>
          ))}
        </div>
      </div>
    )}
  </div>
</section>